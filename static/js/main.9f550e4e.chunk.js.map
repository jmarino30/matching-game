{"version":3,"sources":["img/CardBack.png","components/CardFront.js","components/CardBack.js","actions/index.js","constants.js","components/CardList.js","components/Labels.js","components/Modal.js","components/App.js","reducers/index.js","index.js"],"names":["module","exports","CardFront","props","onClick","src","cardImg","alt","CardBack","height","window","innerWidth","id","deckSet","className","robotName","requestRobots","numOfCards","dispatch","type","fetch","parseInt","then","response","json","data","matchedRobots","value","results","push","array","i","length","j","Math","floor","random","temp","shuffle","payload","catch","error","createInitialIsFlippedState","Array","fill","createInitialIsMatchedState","setDeckSet","closeModal","toggleOptions","CardList","handleClick","index","robotId","isMatched","previousCard","pending","handleFlip","storePreviousCard","handleMatchFound","resetActiveCards","setPending","setTimeout","renderCards","arrOfCards","robots","map","robot","key","isFlipped","email","name","first","this","startNewGame","React","Component","connect","state","handleIsFlipReducer","handleMatchesReducer","handleActiveCardsReducer","deckSetReducer","cardIndex","cardOneIndex","cardTwoIndex","Labels","handleKeyPress","e","modalAlert","handleSubmit","numOfCardsInput","modalPrompt","handleChange","target","setNumOfCards","toggleOptionsMenu","optionsMenu","optionsOn","handleSelect","totalMatches","matchesFound","forEach","card","style","lineHeight","onChange","step","onKeyPress","cursor","inputMode","pattern","optionsReducer","numOfCardsReducer","message","modal","modalReducer","handleCloseModal","body","App","initialStateRobots","isPending","initialActiveCardsState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f550e4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CardBack.6f465c93.png\";","import React from 'react';\nimport './CardList.css';\nimport cardImg from '../img/CardBack.png';\n\nconst CardFront = (props) => {\n    return (\n        <div \n        onClick={props.onClick} >\n            <img src={cardImg} alt='card' />\n        </div>\n    );\n}\n\nexport default CardFront;\n","import React from 'react';\nimport './CardList.css';\n\nconst CardBack = props => {\n    return (\n        <div onClick={props.onClick}>\n            <img height=\"auto\" \n                src={window.innerWidth > 600 ?\n                `https://robohash.org/${props.id}?size=100x100&set=set${props.deckSet}` :\n                `https://robohash.org/${props.id}?size=60x60&set=set${props.deckSet}`} \n                alt='robot'/>\n            <div className=\"card-text\">\n                {props.robotName}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBack;","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET\n} from '../constants';\n\nconst shuffle = (array) => {\n    for(let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n}\nexport const requestRobots = (numOfCards) => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(`https://randomuser.me/api/?results=${parseInt(numOfCards/2)}&inc=name,email`)\n        .then(response => response.json())\n        .then(data => {\n            // Create copy of each robot\n            let matchedRobots = []; \n            for (const value in data.results) {\n                matchedRobots.push(data.results[value]);\n                matchedRobots.push(data.results[value]);\n            }\n            // Shuffle deck (robots)\n            shuffle(matchedRobots); \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: matchedRobots })})\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\nexport const handleFlip = (cardIndex) => {\n    return {\n        type: HANDLE_FLIP,\n        payload: cardIndex\n    }\n}\nexport const createInitialIsFlippedState = numOfCards => {\n    let isFlipped = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_FLIPPED_STATE,\n        payload: isFlipped\n    }\n}\nexport const createInitialIsMatchedState = numOfCards => {\n    let isMatched = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_MATCHED_STATE,\n        payload: isMatched\n    }\n}\nexport const resetActiveCards = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: RESET_ACTIVE_CARDS,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const storePreviousCard = (cardIndex, id) => {\n    return {\n        type: STORE_PREVIOUS_CARD,\n        payload: {\n            cardIndex,\n            id,\n            pending: false\n        }\n    }\n}\nexport const setPending = value => {\n    return {\n        type: PREVIOUS_CARD_PENDING,\n        payload: value\n    }\n}\nexport const handleMatchFound = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: MATCH_FOUND,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const setDeckSet = deckSet => {\n    return {\n        type: SET_DECK_SET,\n        payload: deckSet\n    }\n}\nexport const modalAlert = message => {\n    return {\n        type: 'MODAL_ALERT',\n        payload: message\n    }\n}\nexport const modalPrompt = message => {\n    return {\n        type: 'MODAL_PROMPT',\n        payload: message\n    }\n}\nexport const closeModal = () => {\n    return {\n        type: 'CLOSE_MODAL'\n    }\n}\nexport const optionsOn = () => {\n    return {\n        type: 'OPTIONS_ON'\n    }\n}\nexport const toggleOptions = () => {\n    return {\n        type: 'TOGGLE_OPTIONS'\n    }\n}\nexport const setNumOfCards = (numOfCards) => {\n    return {\n        type: 'NUM_OF_CARDS',\n        payload: numOfCards\n    }\n}","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const HANDLE_FLIP = 'HANDLE_FLIP';\nexport const CREATE_INITIAL_IS_FLIPPED_STATE = 'CREATE_INITIAL_IS_FLIPPED_STATE';\nexport const CREATE_INITIAL_IS_MATCHED_STATE = 'CREATE_INITIAL_IS_MATCHED_STATE';\nexport const RESET_ACTIVE_CARDS = 'RESET_ACTIVE_CARDS';\nexport const STORE_PREVIOUS_CARD = 'STORE_PREVIOUS_CARD';\nexport const PREVIOUS_CARD_PENDING = 'PREVIOUS_CARD_PENDING';\nexport const MATCH_FOUND = 'MATCH_FOUND';\nexport const SET_DECK_SET = 'SET_DECK_SET';","import React from 'react';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\nimport { connect } from 'react-redux';\nimport { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending } from '../actions';\n\nclass CardList extends React.Component {\n    componentDidMount() {\n        this.props.startNewGame(20);\n    }\n    handleClick = (index, robotId) => {\n        //check if card is already matched or previous card\n        if (!this.props.isMatched[index] && !this.props.previousCard.pending) {\n            if (this.props.previousCard.id === null) {\n                this.props.handleFlip(index);\n                this.props.storePreviousCard(index, robotId);\n            } else { \n                //make sure you can't click same card\n                if (this.props.previousCard.index !== index) {\n                    this.props.handleFlip(index);\n                    //if cards match\n                    if (this.props.previousCard.id === robotId) {\n                        this.props.handleMatchFound(this.props.previousCard.index, index);\n                        this.props.resetActiveCards(this.props.previousCard.index, index);\n                    } else {\n                        //if cards do not match\n                        this.props.setPending(true);\n                        setTimeout( () => {\n                            this.props.handleFlip(this.props.previousCard.index);\n                            this.props.handleFlip(index);\n                            this.props.resetActiveCards(this.props.previousCard.index, index);\n                            }, \n                        2000);\n                    }\n                }\n            }\n        }\n    }\n    renderCards = () => {\n        let arrOfCards = this.props.robots.map((robot,index) => {\n            return (\n                <div className={this.props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index}>\n                    <div className={this.props.isFlipped[index] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n                        <div className=\"card__face card__face--front\">\n                            <CardFront onClick={() => this.handleClick(index, robot.email)} />\n                        </div>\n                        <div className=\"card__face card__face--back\">\n                            <CardBack \n                                robotName={robot.name.first} \n                                id={robot.email}\n                                deckSet={this.props.deckSet}\n                                onClick={() => this.handleClick(index, robot.email)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n        return <div>{arrOfCards}</div>; \n    }\n    render() {\n        return (\n            <div className=\"mw9 center ph3-ns\">\n                <div className=\"cf ph2-ns\">\n                    {this.renderCards()}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        robots: state.requestRobots.robots,\n        isFlipped: state.handleIsFlipReducer.isFlipped,\n        isMatched: state.handleMatchesReducer.isMatched,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        deckSet: state.deckSetReducer.deckSet\n    }\n}\n\nexport default connect(mapStateToProps, { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending })(CardList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } from '../actions';\nimport './Hamburgers.css';\nimport './Fireworks.css';\n\nclass Labels extends React.Component {\n    handleKeyPress = e => {\n        if (this.props.previousCard.pending && this.props.previousCard.id !== null) {\n            this.props.modalAlert(\"Please finish current selection before starting a new game!\");\n        } else if (e.key === 'Enter') { \n                this.handleSubmit();\n            }\n    }\n    handleSubmit = () => {\n        if (this.props.previousCard.pending  || this.props.previousCard.id !== null) {\n            this.props.modalAlert('Please finish current selection before starting a new game!');\n        } else if (this.props.numOfCardsInput < 2 || this.props.numOfCardsInput === '') {\n            this.props.modalAlert(\"Every robot needs a friend. Please enter a number 2 or greater.\");\n        } else {\n            this.props.modalPrompt(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\");\n        }\n    }\n    handleChange = e => {\n        if (e.target.value === '') {\n            this.props.setNumOfCards('');\n        } else if (e.target.value >= 0 && e.target.value < 99) {\n            this.props.setNumOfCards(parseInt(e.target.value));\n        } else {\n            this.props.setNumOfCards('');\n        }\n    }\n    toggleOptionsMenu = e => {\n        if (this.props.optionsMenu === null) {\n            this.props.optionsOn();\n        } else {\n            this.props.toggleOptions();\n        }\n    }\n    handleSelect = e => {\n        this.props.setDeckSet(parseInt(e.target.value));\n    }\n    render() {\n        //calculate matches to display in label\n        let totalMatches = 0;\n        let matchesFound = 0;\n        this.props.isMatched.forEach(card => {\n            if (card) {matchesFound++;}\n        });\n        matchesFound /= 2;\n        totalMatches = parseInt(this.props.isMatched.length / 2);\n        return (\n            <div>\n                { window.innerWidth > 1020 ? //options on main screen\n                    <h2 style={{lineHeight:\"50px\"}}>\n                        <div className=\"dib ph4 fl\">\n                            {matchesFound === totalMatches ? <button className=\"grow ph2 mh3\" onClick={this.handleSubmit}>Start New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                        </div>\n                        <div className=\"dib ph3 fl\">\n                            Deck Set:\n                            <select value={this.props.deckSet} onChange={this.handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                            </select>\n                        </div>\n                        <div className=\"dib ph3 fl\">\n                            # Of Cards:\n                            <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.props.numOfCardsInput} />\n                        </div>\n                        <div className=\"dib ph4 fr\">\n                            <button className=\"grow\" onClick={this.handleSubmit}>RESET</button>\n                        </div>\n                    </h2>\n                :\n                window.innerWidth > 600 ? //desktop version\n                    <h2>\n                        <div className=\"container\">\n                            <div className={this.props.optionsMenu === null ? null : this.props.optionsMenu ? \"slideOut\" : \"slideIn\"}>\n                                <span className=\"matches fl\">\n                                    {matchesFound === totalMatches ? <button className=\"grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                                </span>\n                                <span className=\"options-button fl\">\n                                    <span className=\"fr grow\" onClick={this.toggleOptionsMenu} style={{cursor:'pointer'}}>\n                                        Options\n                                        <button className={this.props.optionsMenu ? \"hamburger hamburger--arrowturn-r is-active\" : \"hamburger hamburger--arrowturn-r\"} type=\"button\">\n                                            <span className=\"hamburger-box\">\n                                                <span className=\"hamburger-inner\"></span>\n                                            </span>\n                                        </button> \n                                    </span>\n                                </span>\n                                <span className=\"options-menu fl\" >\n                                    <div className=\"w-40 dib\">\n                                    Deck Set:\n                                        <select value={this.props.deckSet} onChange={this.handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                                            <option value=\"1\">1</option>\n                                            <option value=\"2\">2</option>\n                                            <option value=\"3\">3</option>\n                                            <option value=\"4\">4</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"w-40 dib\">\n                                        # Of Cards:\n                                        <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.props.numOfCardsInput} />\n                                    </div>\n                                    <div className=\"w-20 dib\">\n                                        <button className=\"grow\" onClick={this.handleSubmit}>DONE</button>\n                                    </div>\n                                </span> \n                            </div>\n                        </div>\n                    </h2>\n                    : //mobile version!\n                    <div>\n                        <h2>\n                            <span className=\"tc dib pl4\">\n                                {matchesFound === totalMatches ? <button className=\"grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                            </span>\n                            <span className=\"fr dib pr2\">\n                                <button onClick={this.toggleOptionsMenu} className={this.props.optionsMenu ? \"hamburger hamburger--collapse is-active\" : \"hamburger hamburger--collapse\"} type=\"button\">\n                                    <span className=\"hamburger-box\">\n                                        <span className=\"hamburger-inner\"></span>\n                                    </span>\n                                </button> \n                            </span>\n                        </h2>\n                        <div className={this.props.optionsMenu === null ? \"mobile-options-menu\" : this.props.optionsMenu ? \"mobile-options-menu slideDown\" : \"mobile-options-menu slideUp\"} >\n                            <div className=\"w-34 dib tl pl1\">\n                                Deck Set:\n                                <select className=\"shadow-5\" value={this.props.deckSet} onChange={this.handleSelect} name=\"deck\" id=\"deck-select\">\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                </select>\n                            </div>\n                            <div className=\"w-40 dib tl pr1\">\n                                # Of Cards:\n                                <input inputMode=\"numeric\" pattern=\"[0-9]*\" step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5\" type=\"number\" value={this.props.numOfCardsInput} />\n                            </div>\n                            <div className=\"dib tr p1\">\n                                <button className=\"grow\" onClick={this.handleSubmit}>DONE</button>\n                            </div>\n                        </div>\n                    </div>\n                    }\n                {matchesFound === totalMatches ? <div className=\"pyro\"><div className=\"before\"></div><div className=\"after\"></div></div> : null }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isMatched: state.handleMatchesReducer.isMatched,\n        deckSet: state.deckSetReducer.deckSet,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        optionsMenu: state.optionsReducer.optionsMenu,\n        numOfCardsInput: state.numOfCardsReducer.numOfCards,\n    }\n}\nexport default connect(mapStateToProps, { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } )(Labels);\n\n","import React from 'react';\nimport './Modal.css';\nimport { connect } from 'react-redux';\nimport { closeModal, toggleOptions } from '../actions';\n\nconst Modal = props => {\n    const handleCloseModal = () => {\n        props.closeModal();\n    }\n    const handleSubmit = () => {\n        props.startNewGame(props.numOfCards);\n        props.toggleOptions();\n        props.closeModal();\n    }\n    const renderModalAlert = () => {\n        return (\n        <div className=\"modal-container\">\n            <div className=\"modal shadow-5\">\n                <div className=\"modal-title\">\n                    Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n                </div>\n                <div className=\"modal-body\">\n                    <p>{props.body}</p>\n                    <button onClick={handleCloseModal} className=\"grow shadow-5 fr ma3\">Got it</button>\n                </div>\n            </div>\n        </div>\n        );\n    }\n    const renderModalPrompt = () => {\n        return (\n        <div className=\"modal-container\">\n            <div className=\"modal shadow-5\">\n                <div className=\"modal-title\">\n                    Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n                </div>\n                <div className=\"modal-body\">\n                    <p>{props.body}</p>\n                    <button onClick={handleSubmit} className=\"grow shadow-5 fr ma3\">Confirm</button>\n                    <button onClick={handleCloseModal} className=\"grow shadow-5 fl ma3\">Cancel</button>\n                </div>\n            </div>\n        </div>\n        );\n    }\n        return (\n           <div>{ props.type === 'alert' ? renderModalAlert() : renderModalPrompt() }</div>\n          );\n    \n}\nconst mapStateToProps = state => {\n    return {\n        modal: state.modalReducer.modal,\n        numOfCards: state.numOfCardsReducer.numOfCards\n    }\n}\nexport default connect(mapStateToProps, { closeModal, toggleOptions })(Modal);\n\n//confirm new game - OK CANCEL\n//not enough cards - OK\n//finish current turn - OK\n\n//no scroll on modal when open (set class on body)","import React from 'react';\nimport CardList from './CardList';\nimport Labels from './Labels';\nimport {connect} from 'react-redux';\nimport { requestRobots, createInitialIsMatchedState, createInitialIsFlippedState, setDeckSet } from '../actions';\nimport './CardList.css';\nimport Modal from './Modal';\n\nclass App extends React.Component {\n\n    startNewGame = (numOfCards) => {\n        this.props.requestRobots(numOfCards);\n        this.props.createInitialIsFlippedState(numOfCards);\n        this.props.createInitialIsMatchedState(numOfCards);\n    }\n    render() {\n        return (\n            <div className=\"tc\">\n                <h1 className=\"tc\">ROBOFRIENDS</h1>\n                { this.props.modal ? \n                    <Modal \n                    type={this.props.modal} \n                    body={this.props.message} \n                    startNewGame={this.startNewGame} /> \n                : null }\n                <Labels startNewGame={this.startNewGame} />\n                <CardList startNewGame={this.startNewGame} />\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        modal: state.modalReducer.modal,\n        message: state.modalReducer.message\n    };\n}\nexport default connect(mapStateToProps, { requestRobots, createInitialIsFlippedState, createInitialIsMatchedState, setDeckSet })(App);","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET\n} from '../constants';\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}\nexport const handleIsFlipReducer = (state={isFlipped:[]}, action) => {\n    let isFlipped = [];\n    switch (action.type) {\n        case CREATE_INITIAL_IS_FLIPPED_STATE:\n            return {...state, isFlipped: action.payload};\n        case HANDLE_FLIP:\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload) {\n                    return !card;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        default: \n            return state;\n    }\n}\nexport const handleMatchesReducer = (state={isMatched:[]}, action) => {\n    switch (action.type) {\n        case CREATE_INITIAL_IS_MATCHED_STATE:\n            return {...state, isMatched: action.payload};\n        case MATCH_FOUND:\n            const isMatched = state.isMatched.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return true;\n                }\n                return card;\n            });\n            return {...state, isMatched};\n        default:\n            return state;\n    }\n}\nconst initialActiveCardsState = {\n    previousCard: {\n        index: null,\n        id: null,\n        pending: false\n    }\n}\nexport const handleActiveCardsReducer = (state=initialActiveCardsState, action) => {\n    switch (action.type) {\n        case STORE_PREVIOUS_CARD: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            index: action.payload.cardIndex, \n                            id: action.payload.id\n                        }\n                    };\n        case PREVIOUS_CARD_PENDING: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            pending: true, \n                        }\n                    };\n        case RESET_ACTIVE_CARDS:\n                return {...state, \n                        previousCard: {\n                            ...state.previousCard, \n                                index: null, \n                                id: null,\n                                pending: false\n                            }\n                        };\n        default:\n            return state;\n    }\n}\nexport const deckSetReducer = (state={deckSet: 1}, action) => {\n    switch (action.type) {\n        case SET_DECK_SET: \n            return {...state, deckSet: action.payload};\n        default:\n            return state;\n    }\n}\nexport const modalReducer = (state={modal: null}, action) => {\n    switch (action.type) {\n        case 'MODAL_ALERT':\n            return {...state, modal: 'alert', message: action.payload};\n        case 'MODAL_PROMPT':\n            return {...state, modal: 'prompt', message: action.payload};\n        case 'CLOSE_MODAL':\n            return {...state, modal: null, message: null};\n        default:\n            return state;\n    }\n}\nexport const optionsReducer = (state={optionsMenu:null}, action) => {\n    switch (action.type) {\n        case 'OPTIONS_ON':\n            return {...state, optionsMenu: true}\n        case 'TOGGLE_OPTIONS':\n            return {...state, optionsMenu: !state.optionsMenu}\n        default:\n            return state;\n    }\n}\nexport const numOfCardsReducer = (state={numOfCards: 20}, action) => {\n    switch (action.type) {\n        case 'NUM_OF_CARDS':\n            return {...state, numOfCards: action.payload};\n        default:\n            return state;\n    }\n}\n/*\nexport const handleFlipReducer = (state={}, action={}) => {\n    let cards = [];\n    switch (action.type) {\n        case 'CREATE_INIITAL_CARD_STATE':\n            //payload of number of cards\n            \n            cards.push({isFlipped: false, isMatched: false, isActive: false, id: action.payload});\n            \n            return {...state, cards};\n        case 'ASSIGN_ROBOT_ID':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    return {...card, robotId: action.payload.robotId};\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'CARD_CLICKED':\n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    if (!card.isMatched) {\n                        return {...card, isFlipped: !card.isFlipped, isActive: true};\n                    }\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'MATCH_FOUND': \n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isMatched: true};\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isMatched: true};\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards}; \n        case 'RESET_ACTIVE_CARDS':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isActive: false}\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isActive: false}\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards};\n        default: return state;\n    }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './components/App';\nimport {requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} ><App /></Provider>, \n    document.getElementById('root'));\n"],"sourceRoot":""}