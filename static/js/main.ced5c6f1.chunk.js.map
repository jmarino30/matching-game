{"version":3,"sources":["img/CardBack.png","components/CardFront.js","components/CardBack.js","actions/index.js","constants.js","components/CardList.js","components/Labels.js","components/Modal.js","components/App.js","reducers/index.js","index.js"],"names":["module","exports","CardFront","props","onClick","src","cardImg","alt","CardBack","height","window","innerWidth","id","deckSet","className","robotName","requestRobots","numOfCards","dispatch","type","fetch","parseInt","then","response","json","data","matchedRobots","value","results","push","array","i","length","j","Math","floor","random","temp","shuffle","payload","catch","error","createInitialIsFlippedState","Array","fill","createInitialIsMatchedState","setDeckSet","closeModal","CardList","handleClick","index","robotId","isMatched","previousCard","pending","handleFlip","storePreviousCard","handleMatchFound","resetActiveCards","setPending","setTimeout","renderCards","arrOfCards","robots","map","robot","key","isFlipped","email","name","first","this","startNewGame","React","Component","connect","state","handleIsFlipReducer","handleMatchesReducer","handleActiveCardsReducer","deckSetReducer","cardIndex","cardOneIndex","cardTwoIndex","Labels","handleKeyPress","e","modalAlert","handleSubmit","numOfCardsInput","modalPrompt","handleChange","target","setNumOfCards","toggleOptionsMenu","optionsMenu","optionsOn","toggleOptions","handleSelect","totalMatches","matchesFound","forEach","card","style","lineHeight","onChange","step","onKeyPress","cursor","inputMode","pattern","optionsReducer","numOfCardsReducer","message","optionsOff","handleCloseModal","body","App","modal","modalReducer","initialStateRobots","isPending","initialActiveCardsState","logger","createLogger","rootReducer","combineReducers","action","document","classList","add","remove","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ced5c6f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CardBack.6f465c93.png\";","import React from 'react';\nimport './CardList.css';\nimport cardImg from '../img/CardBack.png';\n\nconst CardFront = (props) => {\n    return (\n        <div \n        onClick={props.onClick} >\n            <img src={cardImg} alt='card' />\n        </div>\n    );\n}\n\nexport default CardFront;\n","import React from 'react';\nimport './CardList.css';\n\nconst CardBack = props => {\n    return (\n        <div onClick={props.onClick}>\n            <img height=\"auto\" \n                src={window.innerWidth > 600 ?\n                `https://robohash.org/${props.id}?size=100x100&set=set${props.deckSet}` :\n                `https://robohash.org/${props.id}?size=60x60&set=set${props.deckSet}`} \n                alt='robot'/>\n            <div className=\"card-text\">\n                {props.robotName}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBack;","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET,\n    MODAL_ALERT,\n    MODAL_PROMPT,\n    CLOSE_MODAL,\n    OPTIONS_ON,\n    OPTIONS_OFF,\n    TOGGLE_OPTIONS,\n    NUM_OF_CARDS\n} from '../constants';\n\nconst shuffle = (array) => {\n    for(let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n}\nexport const requestRobots = (numOfCards) => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(`https://randomuser.me/api/?results=${parseInt(numOfCards/2)}&inc=name,email`)\n        .then(response => response.json())\n        .then(data => {\n            // Create copy of each robot\n            let matchedRobots = []; \n            for (const value in data.results) {\n                matchedRobots.push(data.results[value]);\n                matchedRobots.push(data.results[value]);\n            }\n            // Shuffle deck (robots)\n            shuffle(matchedRobots); \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: matchedRobots })})\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\nexport const handleFlip = (cardIndex) => {\n    return {\n        type: HANDLE_FLIP,\n        payload: cardIndex\n    }\n}\nexport const createInitialIsFlippedState = numOfCards => {\n    let isFlipped = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_FLIPPED_STATE,\n        payload: isFlipped\n    }\n}\nexport const createInitialIsMatchedState = numOfCards => {\n    let isMatched = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_MATCHED_STATE,\n        payload: isMatched\n    }\n}\nexport const resetActiveCards = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: RESET_ACTIVE_CARDS,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const storePreviousCard = (cardIndex, id) => {\n    return {\n        type: STORE_PREVIOUS_CARD,\n        payload: {\n            cardIndex,\n            id,\n            pending: false\n        }\n    }\n}\nexport const setPending = value => {\n    return {\n        type: PREVIOUS_CARD_PENDING,\n        payload: value\n    }\n}\nexport const handleMatchFound = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: MATCH_FOUND,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const setDeckSet = deckSet => {\n    return {\n        type: SET_DECK_SET,\n        payload: deckSet\n    }\n}\nexport const modalAlert = message => {\n    return {\n        type: MODAL_ALERT,\n        payload: message\n    }\n}\nexport const modalPrompt = message => {\n    return {\n        type: MODAL_PROMPT,\n        payload: message\n    }\n}\nexport const closeModal = () => {\n    return {\n        type: CLOSE_MODAL\n    }\n}\nexport const optionsOn = () => {\n    return {\n        type: OPTIONS_ON\n    }\n}\nexport const optionsOff = () => {\n    return {\n        type: OPTIONS_OFF\n    }\n}\nexport const toggleOptions = () => {\n    return {\n        type: TOGGLE_OPTIONS\n    }\n}\nexport const setNumOfCards = (numOfCards) => {\n    return {\n        type: NUM_OF_CARDS,\n        payload: numOfCards\n    }\n}","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const HANDLE_FLIP = 'HANDLE_FLIP';\nexport const CREATE_INITIAL_IS_FLIPPED_STATE = 'CREATE_INITIAL_IS_FLIPPED_STATE';\nexport const CREATE_INITIAL_IS_MATCHED_STATE = 'CREATE_INITIAL_IS_MATCHED_STATE';\nexport const RESET_ACTIVE_CARDS = 'RESET_ACTIVE_CARDS';\nexport const STORE_PREVIOUS_CARD = 'STORE_PREVIOUS_CARD';\nexport const PREVIOUS_CARD_PENDING = 'PREVIOUS_CARD_PENDING';\nexport const MATCH_FOUND = 'MATCH_FOUND';\nexport const SET_DECK_SET = 'SET_DECK_SET';\nexport const MODAL_ALERT = 'MODAL_ALERT';\nexport const MODAL_PROMPT = 'MODAL_PROMPT';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const OPTIONS_ON = 'OPTIONS_ON';\nexport const OPTIONS_OFF = 'OPTIONS_OFF';\nexport const TOGGLE_OPTIONS = 'TOGGLE_OPTIONS';\nexport const NUM_OF_CARDS = 'NUM_OF_CARDS';","import React from 'react';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\nimport { connect } from 'react-redux';\nimport { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending } from '../actions';\n\nclass CardList extends React.Component {\n    componentDidMount() {\n        this.props.startNewGame(20);\n    }\n    handleClick = (index, robotId) => {\n        //check if card is already matched or previous card\n        if (!this.props.isMatched[index] && !this.props.previousCard.pending) {\n            if (this.props.previousCard.id === null) {\n                this.props.handleFlip(index);\n                this.props.storePreviousCard(index, robotId);\n            } else { \n                //make sure you can't click same card\n                if (this.props.previousCard.index !== index) {\n                    this.props.handleFlip(index);\n                    //if cards match\n                    if (this.props.previousCard.id === robotId) {\n                        this.props.handleMatchFound(this.props.previousCard.index, index);\n                        this.props.resetActiveCards(this.props.previousCard.index, index);\n                    } else {\n                        //if cards do not match\n                        this.props.setPending(true);\n                        setTimeout( () => {\n                            this.props.handleFlip(this.props.previousCard.index);\n                            this.props.handleFlip(index);\n                            this.props.resetActiveCards(this.props.previousCard.index, index);\n                            }, \n                        2000);\n                    }\n                }\n            }\n        }\n    }\n    renderCards = () => {\n        let arrOfCards = this.props.robots.map((robot,index) => {\n            return (\n                <div className={this.props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index}>\n                    <div className={this.props.isFlipped[index] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n                        <div className=\"card__face card__face--front\">\n                            <CardFront onClick={() => this.handleClick(index, robot.email)} />\n                        </div>\n                        <div className=\"card__face card__face--back\">\n                            <CardBack \n                                robotName={robot.name.first} \n                                id={robot.email}\n                                deckSet={this.props.deckSet}\n                                onClick={() => this.handleClick(index, robot.email)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n        return <div>{arrOfCards}</div>; \n    }\n    render() {\n        return (\n            <div className=\"mw9 center ph3-ns\">\n                <div className=\"cf ph2-ns\">\n                    {this.renderCards()}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        robots: state.requestRobots.robots,\n        isFlipped: state.handleIsFlipReducer.isFlipped,\n        isMatched: state.handleMatchesReducer.isMatched,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        deckSet: state.deckSetReducer.deckSet\n    }\n}\n\nexport default connect(mapStateToProps, { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending })(CardList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } from '../actions';\nimport './Hamburgers.css';\nimport './Fireworks.css';\n\nclass Labels extends React.Component {\n    handleKeyPress = e => {\n        if (this.props.previousCard.pending && this.props.previousCard.id !== null) {\n            this.props.modalAlert(\"Please finish current selection before starting a new game!\");\n        } else if (e.key === 'Enter') { \n                this.handleSubmit();\n            }\n    }\n    handleSubmit = () => {\n        if (this.props.previousCard.pending  || this.props.previousCard.id !== null) {\n            this.props.modalAlert('Please finish current selection before starting a new game!');\n        } else if (this.props.numOfCardsInput < 2 || this.props.numOfCardsInput === '') {\n            this.props.modalAlert(\"Every robot needs a friend. Please enter a number 2 or greater.\");\n        } else {\n            this.props.modalPrompt(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\");\n        }\n    }\n    handleChange = e => {\n        if (e.target.value === '') {\n            this.props.setNumOfCards('');\n        } else if (e.target.value >= 0 && e.target.value < 99) {\n            this.props.setNumOfCards(parseInt(e.target.value));\n        } else {\n            this.props.setNumOfCards('');\n        }\n    }\n    toggleOptionsMenu = e => {\n        if (this.props.optionsMenu === null) {\n            this.props.optionsOn();\n        } else {\n            this.props.toggleOptions();\n        }\n    }\n    handleSelect = e => {\n        this.props.setDeckSet(parseInt(e.target.value));\n    }\n    render() {\n        //calculate matches to display in label\n        let totalMatches = 0;\n        let matchesFound = 0;\n        this.props.isMatched.forEach(card => {\n            if (card) {matchesFound++;}\n        });\n        matchesFound /= 2;\n        totalMatches = parseInt(this.props.isMatched.length / 2);\n        return (\n            <div>\n                { window.innerWidth > 1020 ? //options on main screen\n                    <h2 style={{lineHeight:\"50px\"}}>\n                        <div className=\"dib ph4 fl\">\n                            {matchesFound === totalMatches ? <button className=\"grow ph2 mh3\" onClick={this.handleSubmit}>Start New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                        </div>\n                        <div className=\"dib ph3\">\n                            Deck Set:\n                            <select value={this.props.deckSet} onChange={this.handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                            </select>\n                        </div>\n                        <div className=\"dib ph3\">\n                            # Of Cards:\n                            <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.props.numOfCardsInput} />\n                        </div>\n                        <div className=\"dib ph4 fr\">\n                            <button className=\"grow\" onClick={this.handleSubmit}>RESET</button>\n                        </div>\n                    </h2>\n                :\n                window.innerWidth > 600 ? //desktop version\n                    <h2>\n                        <div className=\"container\">\n                            <div className={this.props.optionsMenu === null ? null : this.props.optionsMenu ? \"slideOut\" : \"slideIn\"}>\n                                <span className=\"matches fl\">\n                                    {matchesFound === totalMatches ? <button className=\"grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                                </span>\n                                <span className=\"options-button fl\">\n                                    <span className=\"fr grow\" onClick={this.toggleOptionsMenu} style={{cursor:'pointer'}}>\n                                        Options\n                                        <button className={this.props.optionsMenu ? \"hamburger hamburger--arrowturn-r is-active\" : \"hamburger hamburger--arrowturn-r\"} type=\"button\">\n                                            <span className=\"hamburger-box\">\n                                                <span className=\"hamburger-inner\"></span>\n                                            </span>\n                                        </button> \n                                    </span>\n                                </span>\n                                <span className=\"options-menu fl\" >\n                                    <div className=\"w-40 dib\">\n                                    Deck Set:\n                                        <select value={this.props.deckSet} onChange={this.handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                                            <option value=\"1\">1</option>\n                                            <option value=\"2\">2</option>\n                                            <option value=\"3\">3</option>\n                                            <option value=\"4\">4</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"w-40 dib\">\n                                        # Of Cards:\n                                        <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.props.numOfCardsInput} />\n                                    </div>\n                                    <div className=\"w-20 dib\">\n                                        <button className=\"grow\" onClick={this.handleSubmit}>DONE</button>\n                                    </div>\n                                </span> \n                            </div>\n                        </div>\n                    </h2>\n                    : //mobile version\n                    <div>\n                        <h2>\n                            <span className=\"tc dib pl4\">\n                                {matchesFound === totalMatches ? <button className=\"grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                            </span>\n                            <span className=\"fr dib pr2\">\n                                <button onClick={this.toggleOptionsMenu} className={this.props.optionsMenu ? \"hamburger hamburger--collapse is-active\" : \"hamburger hamburger--collapse\"} type=\"button\">\n                                    <span className=\"hamburger-box\">\n                                        <span className=\"hamburger-inner\"></span>\n                                    </span>\n                                </button> \n                            </span>\n                        </h2>\n                        <div className={this.props.optionsMenu === null ? \"mobile-options-menu\" : this.props.optionsMenu ? \"mobile-options-menu slideDown\" : \"mobile-options-menu slideUp\"} >\n                            <div className=\"w-34 dib tl pl1\">\n                                Deck Set:\n                                <select className=\"shadow-5\" value={this.props.deckSet} onChange={this.handleSelect} name=\"deck\" id=\"deck-select\">\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                </select>\n                            </div>\n                            <div className=\"w-40 dib tl pr1\">\n                                # Of Cards:\n                                <input inputMode=\"numeric\" pattern=\"[0-9]*\" step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5\" type=\"number\" value={this.props.numOfCardsInput} />\n                            </div>\n                            <div className=\"dib tr p1\">\n                                <button className=\"grow\" onClick={this.handleSubmit}>DONE</button>\n                            </div>\n                        </div>\n                    </div>\n                    }\n                {matchesFound === totalMatches ? <div className=\"pyro\"><div className=\"before\"></div><div className=\"after\"></div></div> : null }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isMatched: state.handleMatchesReducer.isMatched,\n        deckSet: state.deckSetReducer.deckSet,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        optionsMenu: state.optionsReducer.optionsMenu,\n        numOfCardsInput: state.numOfCardsReducer.numOfCards,\n    }\n}\nexport default connect(mapStateToProps, { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } )(Labels);\n\n","import React from 'react';\nimport './Modal.css';\nimport { connect } from 'react-redux';\nimport { closeModal, optionsOff } from '../actions';\n\nconst Modal = props => {\n    const handleCloseModal = () => {\n        props.closeModal();\n    }\n    const handleSubmit = () => {\n        props.startNewGame(props.numOfCards);\n        props.optionsOff();\n        props.closeModal();\n    }\n    const renderModalAlert = () => {\n        return (\n        <div className=\"modal-container\">\n            <div className=\"modal shadow-5\">\n                <div className=\"modal-title\">\n                    Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n                </div>\n                <div className=\"modal-body\">\n                    <p>{props.body}</p>\n                    <button onClick={handleCloseModal} className=\"grow shadow-5 fr ma3\">Got it</button>\n                </div>\n            </div>\n        </div>\n        );\n    }\n    const renderModalPrompt = () => {\n        return (\n        <div className=\"modal-container\">\n            <div className=\"modal shadow-5\">\n                <div className=\"modal-title\">\n                    Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n                </div>\n                <div className=\"modal-body\">\n                    <p>{props.body}</p>\n                    <button onClick={handleSubmit} className=\"grow shadow-5 fr ma3\">Confirm</button>\n                    <button onClick={handleCloseModal} className=\"grow shadow-5 fl ma3\">Cancel</button>\n                </div>\n            </div>\n        </div>\n        );\n    }\n        return (\n           <div>{ props.type === 'alert' ? renderModalAlert() : renderModalPrompt() }</div>\n          );\n    \n}\nconst mapStateToProps = state => {\n    return {\n        numOfCards: state.numOfCardsReducer.numOfCards\n    }\n}\nexport default connect(mapStateToProps, { closeModal, optionsOff })(Modal);","import React from 'react';\nimport CardList from './CardList';\nimport Labels from './Labels';\nimport {connect} from 'react-redux';\nimport { requestRobots, createInitialIsMatchedState, createInitialIsFlippedState, setDeckSet } from '../actions';\nimport './CardList.css';\nimport Modal from './Modal';\n\nclass App extends React.Component {\n\n    startNewGame = (numOfCards) => {\n        this.props.requestRobots(numOfCards);\n        this.props.createInitialIsFlippedState(numOfCards);\n        this.props.createInitialIsMatchedState(numOfCards);\n    }\n    render() {\n        return (\n            <div className=\"tc\">\n                <h1 className=\"tc\">ROBOFRIENDS</h1>\n                { this.props.modal ? \n                    <Modal \n                    type={this.props.modal} \n                    body={this.props.message} \n                    startNewGame={this.startNewGame} /> \n                : null }\n                <Labels startNewGame={this.startNewGame} />\n                <CardList startNewGame={this.startNewGame} />\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        modal: state.modalReducer.modal,\n        message: state.modalReducer.message\n    };\n}\nexport default connect(mapStateToProps, { requestRobots, createInitialIsFlippedState, createInitialIsMatchedState, setDeckSet })(App);","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET,\n    MODAL_ALERT,\n    MODAL_PROMPT,\n    CLOSE_MODAL,\n    OPTIONS_ON,\n    OPTIONS_OFF,\n    TOGGLE_OPTIONS,\n    NUM_OF_CARDS\n} from '../constants';\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}\nexport const handleIsFlipReducer = (state={isFlipped:[]}, action) => {\n    let isFlipped = [];\n    switch (action.type) {\n        case CREATE_INITIAL_IS_FLIPPED_STATE:\n            return {...state, isFlipped: action.payload};\n        case HANDLE_FLIP:\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload) {\n                    return !card;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        default: \n            return state;\n    }\n}\nexport const handleMatchesReducer = (state={isMatched:[]}, action) => {\n    switch (action.type) {\n        case CREATE_INITIAL_IS_MATCHED_STATE:\n            return {...state, isMatched: action.payload};\n        case MATCH_FOUND:\n            const isMatched = state.isMatched.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return true;\n                }\n                return card;\n            });\n            return {...state, isMatched};\n        default:\n            return state;\n    }\n}\nconst initialActiveCardsState = {\n    previousCard: {\n        index: null,\n        id: null,\n        pending: false\n    }\n}\nexport const handleActiveCardsReducer = (state=initialActiveCardsState, action) => {\n    switch (action.type) {\n        case STORE_PREVIOUS_CARD: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            index: action.payload.cardIndex, \n                            id: action.payload.id\n                        }\n                    };\n        case PREVIOUS_CARD_PENDING: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            pending: true, \n                        }\n                    };\n        case RESET_ACTIVE_CARDS:\n                return {...state, \n                        previousCard: {\n                            ...state.previousCard, \n                                index: null, \n                                id: null,\n                                pending: false\n                            }\n                        };\n        default:\n            return state;\n    }\n}\nexport const deckSetReducer = (state={deckSet: 1}, action) => {\n    switch (action.type) {\n        case SET_DECK_SET: \n            return {...state, deckSet: action.payload};\n        default:\n            return state;\n    }\n}\nexport const modalReducer = (state={modal: null}, action) => {\n    switch (action.type) {\n        case MODAL_ALERT:\n            document.body.classList.add('overflow-hidden');\n            return {...state, modal: 'alert', message: action.payload};\n        case MODAL_PROMPT:\n                document.body.classList.add('overflow-hidden');\n            return {...state, modal: 'prompt', message: action.payload};\n        case CLOSE_MODAL:\n                document.body.classList.remove('overflow-hidden');\n            return {...state, modal: null, message: null};\n        default:\n            return state;\n    }\n}\nexport const optionsReducer = (state={optionsMenu:null}, action) => {\n    switch (action.type) {\n        case OPTIONS_ON:\n            return {...state, optionsMenu: true};\n        case OPTIONS_OFF:\n            return {...state, optionsMenu: false};\n        case TOGGLE_OPTIONS:\n            return {...state, optionsMenu: !state.optionsMenu};\n        default:\n            return state;\n    }\n}\nexport const numOfCardsReducer = (state={numOfCards: 20}, action) => {\n    switch (action.type) {\n        case NUM_OF_CARDS:\n            return {...state, numOfCards: action.payload};\n        default:\n            return state;\n    }\n}\n/*\nexport const handleFlipReducer = (state={}, action={}) => {\n    let cards = [];\n    switch (action.type) {\n        case 'CREATE_INIITAL_CARD_STATE':\n            //payload of number of cards\n            \n            cards.push({isFlipped: false, isMatched: false, isActive: false, id: action.payload});\n            \n            return {...state, cards};\n        case 'ASSIGN_ROBOT_ID':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    return {...card, robotId: action.payload.robotId};\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'CARD_CLICKED':\n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    if (!card.isMatched) {\n                        return {...card, isFlipped: !card.isFlipped, isActive: true};\n                    }\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'MATCH_FOUND': \n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isMatched: true};\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isMatched: true};\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards}; \n        case 'RESET_ACTIVE_CARDS':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isActive: false}\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isActive: false}\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards};\n        default: return state;\n    }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './components/App';\nimport {requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} ><App /></Provider>, \n    document.getElementById('root'));\n"],"sourceRoot":""}