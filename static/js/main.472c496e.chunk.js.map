{"version":3,"sources":["img/CardBack.png","components/CardFront.js","components/CardBack.js","actions/index.js","constants.js","components/CardList.js","components/Labels.js","components/App.js","reducers/index.js","index.js"],"names":["module","exports","CardFront","props","onClick","src","cardImg","alt","CardBack","height","window","innerWidth","id","className","robotName","requestRobots","numOfCards","dispatch","type","fetch","parseInt","then","response","json","data","matchedRobots","value","results","push","array","i","length","j","Math","floor","random","temp","shuffle","payload","catch","error","createInitialIsFlippedState","Array","fill","createInitialIsMatchedState","CardList","handleClick","index","robotId","isMatched","previousCard","pending","handleFlip","storePreviousCard","handleMatchFound","resetActiveCards","setPending","setTimeout","renderCards","arrOfCards","robots","map","robot","key","isFlipped","email","name","first","this","startNewGame","React","Component","connect","state","handleIsFlipReducer","handleMatchesReducer","handleActiveCardsReducer","cardIndex","cardOneIndex","cardTwoIndex","Labels","numOfCardsInput","handleKeyPress","e","confirm","handleSubmit","handleChange","target","setState","totalMatches","matchesFound","forEach","card","step","onKeyPress","onChange","App","initialStateRobots","isPending","initialActiveCardsState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.472c496e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CardBack.6f465c93.png\";","import React from 'react';\nimport './CardList.css';\nimport cardImg from '../img/CardBack.png';\n\nconst CardFront = (props) => {\n    return (\n        <div \n        onClick={props.onClick} >\n            <img src={cardImg} alt='card' />\n        </div>\n    );\n}\n\nexport default CardFront;\n","import React from 'react';\nimport './CardList.css';\n\nconst CardBack = (props) => {\n    return (\n        <div onClick={props.onClick}>\n            <img height=\"auto\" \n                src={window.innerWidth > 600 ?\n                `https://robohash.org/${props.id}?size=120x120` :\n                `https://robohash.org/${props.id}?size=60x60`} \n                alt='robot'/>\n            <div className=\"card-text\">\n                {window.innerWidth > 600 ? props.robotName : ''}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBack;","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND\n} from '../constants';\n\n\nconst shuffle = (array) => {\n    for(let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n      }\n}\nexport const requestRobots = (numOfCards) => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(`https://randomuser.me/api/?results=${parseInt(numOfCards/2)}&inc=name,email`)\n        .then(response => response.json())\n        .then(data => {\n            // Create copy of each robot\n            let matchedRobots = []; \n            for (const value in data.results) {\n                matchedRobots.push(data.results[value]);\n                matchedRobots.push(data.results[value]);\n            }\n            // Shuffle deck (robots)\n            shuffle(matchedRobots); \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: matchedRobots })})\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\nexport const handleFlip = (cardIndex) => {\n    return {\n        type: HANDLE_FLIP,\n        payload: cardIndex\n    }\n}\nexport const createInitialIsFlippedState = numOfCards => {\n    let isFlipped = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_FLIPPED_STATE,\n        payload: isFlipped\n    }\n}\nexport const createInitialIsMatchedState = numOfCards => {\n    let isMatched = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_MATCHED_STATE,\n        payload: isMatched\n    }\n}\nexport const resetActiveCards = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: RESET_ACTIVE_CARDS,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const storePreviousCard = (cardIndex, id) => {\n    return {\n        type: STORE_PREVIOUS_CARD,\n        payload: {\n            cardIndex,\n            id,\n            pending: false\n        }\n    }\n}\nexport const setPending = value => {\n    return {\n        type: PREVIOUS_CARD_PENDING,\n        payload: value\n    }\n}\nexport const handleMatchFound = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: MATCH_FOUND,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const HANDLE_FLIP = 'HANDLE_FLIP';\nexport const CREATE_INITIAL_IS_FLIPPED_STATE = 'CREATE_INITIAL_IS_FLIPPED_STATE';\nexport const CREATE_INITIAL_IS_MATCHED_STATE = 'CREATE_INITIAL_IS_MATCHED_STATE';\nexport const RESET_ACTIVE_CARDS = 'RESET_ACTIVE_CARDS';\nexport const STORE_PREVIOUS_CARD = 'STORE_PREVIOUS_CARD';\nexport const PREVIOUS_CARD_PENDING = 'PREVIOUS_CARD_PENDING';\nexport const MATCH_FOUND = 'MATCH_FOUND';\n","import React from 'react';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\nimport { connect } from 'react-redux';\nimport { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending } from '../actions';\nimport './CardList.css';\n\nclass CardList extends React.Component {\n    componentDidMount() {\n        this.props.startNewGame(20);\n    }\n    handleClick = (index, robotId) => {\n        //check if card is already matched or previous card\n        if (!this.props.isMatched[index] && !this.props.previousCard.pending) {\n            if (this.props.previousCard.id === null) {\n                this.props.handleFlip(index);\n                this.props.storePreviousCard(index, robotId);\n            } else { \n                //make sure you can't click same card\n                if (this.props.previousCard.index !== index) {\n                    this.props.handleFlip(index);\n                    //if cards match\n                    if (this.props.previousCard.id === robotId) {\n                        this.props.handleMatchFound(this.props.previousCard.index, index);\n                        this.props.resetActiveCards(this.props.previousCard.index, index);\n                    } else {\n                        //if cards do not match\n                        this.props.setPending(true);\n                        setTimeout( () => {\n                            this.props.handleFlip(this.props.previousCard.index);\n                            this.props.handleFlip(index);\n                            this.props.resetActiveCards(this.props.previousCard.index, index);\n                            }, \n                        2000);\n                    }\n                }\n            }\n        }\n    }\n    renderCards = () => {\n        let arrOfCards = this.props.robots.map((robot,index) => {\n            return (\n                <div className={this.props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index}>\n                    <div className={this.props.isFlipped[index] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n                        <div className=\"card__face card__face--front\">\n                            <CardFront onClick={() => this.handleClick(index, robot.email)} />\n                        </div>\n                        <div className=\"card__face card__face--back\">\n                            <CardBack \n                                robotName={robot.name.first} \n                                id={robot.email}\n                                onClick={() => this.handleClick(index, robot.email)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n        return <div>{arrOfCards}</div>; \n    }\n    render() {\n        return (\n            <div className=\"mw9 center ph3-ns\">\n                <div className=\"cf ph2-ns\">\n                    {this.renderCards()}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        robots: state.requestRobots.robots,\n        isFlipped: state.handleIsFlipReducer.isFlipped,\n        isMatched: state.handleMatchesReducer.isMatched,\n        previousCard: state.handleActiveCardsReducer.previousCard\n    }\n}\n\nexport default connect(mapStateToProps, { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending })(CardList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass Labels extends React.Component {\n    state = {\n        numOfCardsInput: 20\n    }\n    handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            const r = window.confirm(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\"); \n            if(r === true){ \n                this.props.startNewGame(this.state.numOfCardsInput);\n            }\n        }\n    }\n    handleSubmit = () => {\n        const r = window.confirm(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\"); \n        if(r === true){ \n            this.props.startNewGame(this.state.numOfCardsInput);\n        }\n    }\n    handleChange = e => {\n        if (e.target.value > 1 && e.target.value < 99) {\n            this.setState({ numOfCardsInput: parseInt(e.target.value) })\n        }\n    }\n    render() {\n        let totalMatches = 0;\n        let matchesFound = 0;\n        this.props.isMatched.forEach(card => {\n            if (card) {matchesFound++;}\n        });\n        matchesFound /= 2;\n        totalMatches = parseInt(this.props.isMatched.length / 2);\n        return (\n            <div className=\"tc\">\n                <h2>\n                    <div className=\"labels\">\n                        {matchesFound === totalMatches ? `CONGRATULATIONS!` : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                    </div>\n                    {window.innerWidth > 600 ? \n                        <div className=\"labels\">\n                        Number Of Cards:\n                        <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.state.numOfCardsInput} />\n                        <button className=\"grow\" onClick={this.handleSubmit}>GO</button>\n                        </div> \n                    : ''}\n                </h2>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isMatched: state.handleMatchesReducer.isMatched\n    }\n}\nexport default connect(mapStateToProps, null )(Labels);","import React from 'react';\nimport CardList from './CardList';\nimport Labels from './Labels';\nimport {connect} from 'react-redux';\nimport { requestRobots, createInitialIsMatchedState, createInitialIsFlippedState } from '../actions';\n\n\nclass App extends React.Component {\n\n    startNewGame = (numOfCards) => {\n        this.props.requestRobots(numOfCards);\n        this.props.createInitialIsFlippedState(numOfCards);\n        this.props.createInitialIsMatchedState(numOfCards);\n    }\n    render() {\n        return (\n            <div className=\"tc\">\n                <h1 className=\"tc\">ROBOFRIENDS</h1>\n                <Labels startNewGame={this.startNewGame} />\n                <CardList startNewGame={this.startNewGame} />\n            </div>\n        );\n    }\n}\nexport default connect(null, { requestRobots, createInitialIsFlippedState, createInitialIsMatchedState })(App);","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND\n} from '../constants';\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}\nexport const handleIsFlipReducer = (state={isFlipped:[]}, action) => {\n    let isFlipped = [];\n    switch (action.type) {\n        case CREATE_INITIAL_IS_FLIPPED_STATE:\n            return {...state, isFlipped: action.payload};\n        case HANDLE_FLIP:\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload) {\n                    return !card;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        default: \n            return state;\n    }\n}\nexport const handleMatchesReducer = (state={isMatched:[]}, action) => {\n    switch (action.type) {\n        case CREATE_INITIAL_IS_MATCHED_STATE:\n            return {...state, isMatched: action.payload};\n        case MATCH_FOUND:\n            const isMatched = state.isMatched.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return true;\n                }\n                return card;\n            });\n            return {...state, isMatched};\n        default:\n            return state;\n    }\n}\nconst initialActiveCardsState = {\n    previousCard: {\n        index: null,\n        id: null,\n        pending: false\n    }\n}\nexport const handleActiveCardsReducer = (state=initialActiveCardsState, action) => {\n    switch (action.type) {\n        case STORE_PREVIOUS_CARD: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            index: action.payload.cardIndex, \n                            id: action.payload.id\n                        }\n                    };\n        case PREVIOUS_CARD_PENDING: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            pending: true, \n                        }\n                    };\n        case RESET_ACTIVE_CARDS:\n                return {...state, \n                        previousCard: {\n                            ...state.previousCard, \n                                index: null, \n                                id: null,\n                                pending: false\n                            }\n                        };\n        default:\n            return state;\n    }\n}\n/*\nexport const handleFlipReducer = (state={}, action={}) => {\n    let cards = [];\n    switch (action.type) {\n        case 'CREATE_INIITAL_CARD_STATE':\n            //payload of number of cards\n            \n            cards.push({isFlipped: false, isMatched: false, isActive: false, id: action.payload});\n            \n            return {...state, cards};\n        case 'ASSIGN_ROBOT_ID':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    return {...card, robotId: action.payload.robotId};\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'CARD_CLICKED':\n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    if (!card.isMatched) {\n                        return {...card, isFlipped: !card.isFlipped, isActive: true};\n                    }\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'MATCH_FOUND': \n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isMatched: true};\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isMatched: true};\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards}; \n        case 'RESET_ACTIVE_CARDS':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isActive: false}\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isActive: false}\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards};\n        default: return state;\n    }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './components/App';\nimport {requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}