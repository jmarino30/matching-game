{"version":3,"sources":["img/CardBack.png","components/CardFront.js","components/CardBack.js","actions/index.js","constants.js","components/CardList.js","components/Labels.js","components/Modal.js","components/App.js","reducers/index.js","index.js"],"names":["module","exports","CardFront","props","onClick","src","cardImg","alt","CardBack","height","id","deckSet","className","robotName","requestRobots","numOfCards","dispatch","type","fetch","parseInt","then","response","json","data","matchedRobots","value","results","push","array","i","length","j","Math","floor","random","temp","shuffle","payload","catch","error","createInitialIsFlippedState","Array","fill","createInitialIsMatchedState","setDeckSet","closeModal","CardList","handleClick","index","robotId","isMatched","previousCard","pending","handleFlip","storePreviousCard","handleMatchFound","resetActiveCards","setPending","setTimeout","renderCards","arrOfCards","robots","map","robot","key","isFlipped","email","name","first","width","this","startNewGame","React","Component","connect","state","handleIsFlipReducer","handleMatchesReducer","handleActiveCardsReducer","deckSetReducer","windowWidthReducer","cardIndex","cardOneIndex","cardTwoIndex","Labels","handleKeyPress","e","modalAlert","handleSubmit","numOfCardsInput","modalPrompt","handleChange","target","setNumOfCards","toggleOptionsMenu","optionsMenu","optionsOn","toggleOptions","handleSelect","totalMatches","matchesFound","forEach","card","style","lineHeight","step","onKeyPress","onChange","cursor","inputMode","pattern","optionsReducer","numOfCardsReducer","message","optionsOff","handleCloseModal","body","App","getWindowWidth","window","addEventListener","removeEventListener","modal","modalReducer","innerWidth","initialStateRobots","isPending","initialActiveCardsState","logger","createLogger","rootReducer","combineReducers","action","document","classList","add","remove","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.00c032f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CardBack.6f465c93.png\";","import React from 'react';\nimport './CardList.css';\nimport cardImg from '../img/CardBack.png';\n\nconst CardFront = (props) => {\n    return (\n        <div \n        onClick={props.onClick} >\n            <img src={cardImg} alt='card' />\n        </div>\n    );\n}\n\nexport default CardFront;\n","import React from 'react';\nimport './CardList.css';\n\nconst CardBack = props => {\n    return (\n        <div onClick={props.onClick}>\n            <img height=\"auto\" \n                src={`https://robohash.org/${props.id}?set=set${props.deckSet}`} \n                alt='robot'/>\n            <div className=\"card-text\">\n                {props.robotName}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBack;","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET,\n    MODAL_ALERT,\n    MODAL_PROMPT,\n    CLOSE_MODAL,\n    OPTIONS_ON,\n    OPTIONS_OFF,\n    TOGGLE_OPTIONS,\n    NUM_OF_CARDS,\n    WINDOW_WIDTH\n} from '../constants';\n\nconst shuffle = (array) => {\n    for(let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n}\nexport const requestRobots = (numOfCards) => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(`https://randomuser.me/api/?results=${parseInt(numOfCards/2)}&inc=name,email`)\n        .then(response => response.json())\n        .then(data => {\n            // Create copy of each robot\n            let matchedRobots = []; \n            for (const value in data.results) {\n                matchedRobots.push(data.results[value]);\n                matchedRobots.push(data.results[value]);\n            }\n            // Shuffle deck (robots)\n            shuffle(matchedRobots); \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: matchedRobots })})\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\nexport const handleFlip = (cardIndex) => {\n    return {\n        type: HANDLE_FLIP,\n        payload: cardIndex\n    }\n}\nexport const createInitialIsFlippedState = numOfCards => {\n    let isFlipped = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_FLIPPED_STATE,\n        payload: isFlipped\n    }\n}\nexport const createInitialIsMatchedState = numOfCards => {\n    let isMatched = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_MATCHED_STATE,\n        payload: isMatched\n    }\n}\nexport const resetActiveCards = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: RESET_ACTIVE_CARDS,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const storePreviousCard = (cardIndex, id) => {\n    return {\n        type: STORE_PREVIOUS_CARD,\n        payload: {\n            cardIndex,\n            id,\n            pending: false\n        }\n    }\n}\nexport const setPending = value => {\n    return {\n        type: PREVIOUS_CARD_PENDING,\n        payload: value\n    }\n}\nexport const handleMatchFound = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: MATCH_FOUND,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const setDeckSet = deckSet => {\n    return {\n        type: SET_DECK_SET,\n        payload: deckSet\n    }\n}\nexport const modalAlert = message => {\n    return {\n        type: MODAL_ALERT,\n        payload: message\n    }\n}\nexport const modalPrompt = message => {\n    return {\n        type: MODAL_PROMPT,\n        payload: message\n    }\n}\nexport const closeModal = () => {\n    return {\n        type: CLOSE_MODAL\n    }\n}\nexport const optionsOn = () => {\n    return {\n        type: OPTIONS_ON\n    }\n}\nexport const optionsOff = () => {\n    return {\n        type: OPTIONS_OFF\n    }\n}\nexport const toggleOptions = () => {\n    return {\n        type: TOGGLE_OPTIONS\n    }\n}\nexport const setNumOfCards = (numOfCards) => {\n    return {\n        type: NUM_OF_CARDS,\n        payload: numOfCards\n    }\n}\nexport const getWindowWidth = () => {\n    return {\n        type: WINDOW_WIDTH,\n        payload: window.innerWidth\n    }\n}","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const HANDLE_FLIP = 'HANDLE_FLIP';\nexport const CREATE_INITIAL_IS_FLIPPED_STATE = 'CREATE_INITIAL_IS_FLIPPED_STATE';\nexport const CREATE_INITIAL_IS_MATCHED_STATE = 'CREATE_INITIAL_IS_MATCHED_STATE';\nexport const RESET_ACTIVE_CARDS = 'RESET_ACTIVE_CARDS';\nexport const STORE_PREVIOUS_CARD = 'STORE_PREVIOUS_CARD';\nexport const PREVIOUS_CARD_PENDING = 'PREVIOUS_CARD_PENDING';\nexport const MATCH_FOUND = 'MATCH_FOUND';\nexport const SET_DECK_SET = 'SET_DECK_SET';\nexport const MODAL_ALERT = 'MODAL_ALERT';\nexport const MODAL_PROMPT = 'MODAL_PROMPT';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const OPTIONS_ON = 'OPTIONS_ON';\nexport const OPTIONS_OFF = 'OPTIONS_OFF';\nexport const TOGGLE_OPTIONS = 'TOGGLE_OPTIONS';\nexport const NUM_OF_CARDS = 'NUM_OF_CARDS';\nexport const WINDOW_WIDTH = 'WINDOW_WIDTH';","import React from 'react';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\nimport { connect } from 'react-redux';\nimport { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending } from '../actions';\n\nclass CardList extends React.Component {\n    componentDidMount() {\n        this.props.startNewGame(20);\n    }\n    handleClick = (index, robotId) => {\n        //check if card is already matched or previous card\n        if (!this.props.isMatched[index] && !this.props.previousCard.pending) {\n            if (this.props.previousCard.id === null) {\n                this.props.handleFlip(index);\n                this.props.storePreviousCard(index, robotId);\n            } else { \n                //make sure you can't click same card\n                if (this.props.previousCard.index !== index) {\n                    this.props.handleFlip(index);\n                    //if cards match\n                    if (this.props.previousCard.id === robotId) {\n                        this.props.handleMatchFound(this.props.previousCard.index, index);\n                        this.props.resetActiveCards(this.props.previousCard.index, index);\n                    } else {\n                        //if cards do not match\n                        this.props.setPending(true);\n                        setTimeout( () => {\n                            this.props.handleFlip(this.props.previousCard.index);\n                            this.props.handleFlip(index);\n                            this.props.resetActiveCards(this.props.previousCard.index, index);\n                            }, \n                        2000);\n                    }\n                }\n            }\n        }\n    }\n    renderCards = () => {\n        let arrOfCards = this.props.robots.map((robot,index) => {\n            return (\n                <div className={this.props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index}>\n                    <div className={this.props.isFlipped[index] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n                        <div className=\"card__face card__face--front\">\n                            <CardFront onClick={() => this.handleClick(index, robot.email)} />\n                        </div>\n                        <div className=\"card__face card__face--back\">\n                            <CardBack \n                                robotName={robot.name.first} \n                                id={robot.email}\n                                deckSet={this.props.deckSet}\n                                width={this.props.width}\n                                onClick={() => this.handleClick(index, robot.email)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n        return <div>{arrOfCards}</div>; \n    }\n    render() {\n        return (\n            <div className=\"mw9 center ph3-ns\">\n                <div className=\"cf ph2-ns\">\n                    {this.renderCards()}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        robots: state.requestRobots.robots,\n        isFlipped: state.handleIsFlipReducer.isFlipped,\n        isMatched: state.handleMatchesReducer.isMatched,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        deckSet: state.deckSetReducer.deckSet,\n        width: state.windowWidthReducer.width\n    }\n}\n\nexport default connect(mapStateToProps, { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending })(CardList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } from '../actions';\nimport './Hamburgers.css';\nimport './Fireworks.css';\n\nclass Labels extends React.Component {\n    handleKeyPress = e => {\n        if (this.props.previousCard.pending && this.props.previousCard.id !== null) {\n            this.props.modalAlert(\"Please finish current selection before starting a new game!\");\n        } else if (e.key === 'Enter') { \n                this.handleSubmit();\n            }\n    }\n    handleSubmit = () => {\n        if (this.props.previousCard.pending  || this.props.previousCard.id !== null) {\n            this.props.modalAlert('Please finish current selection before starting a new game!');\n        } else if (this.props.numOfCardsInput < 2 || this.props.numOfCardsInput === '') {\n            this.props.modalAlert(\"Every robot needs a friend. Please enter a number 2 or greater.\");\n        } else {\n            this.props.modalPrompt(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\");\n        }\n    }\n    handleChange = e => {\n        if (e.target.value === '') {\n            this.props.setNumOfCards('');\n        } else if (e.target.value >= 0 && e.target.value < 99) {\n            this.props.setNumOfCards(parseInt(e.target.value));\n        } else {\n            this.props.setNumOfCards('');\n        }\n    }\n    toggleOptionsMenu = e => {\n        if (this.props.optionsMenu === null) {\n            this.props.optionsOn();\n        } else {\n            this.props.toggleOptions();\n        }\n    }\n    handleSelect = e => {\n        this.props.setDeckSet(parseInt(e.target.value));\n    }\n    render() {\n        //calculate matches to display in label\n        let totalMatches = 0;\n        let matchesFound = 0;\n        this.props.isMatched.forEach(card => {\n            if (card) {matchesFound++;}\n        });\n        matchesFound /= 2;\n        totalMatches = parseInt(this.props.isMatched.length / 2);\n        return (\n            <div>\n                { this.props.width > 1040 ? //options on main screen\n                    <h2 style={{lineHeight:\"50px\"}}>\n                        <div className=\"dib ph4 fl\">\n                            {matchesFound === totalMatches ? <button className=\"shadow-5 grow ph2 mh3\" onClick={this.handleSubmit}>Start New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                        </div>\n                        <div className=\"dib ph4 fr\">\n                            <button className=\"shadow-5 grow\" onClick={this.handleSubmit}>RESET</button>\n                        </div>\n                        <div className=\"dib ph3 fr\">\n                            # Of Cards:\n                            <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.props.numOfCardsInput} />\n                        </div>\n                        <div className=\"dib ph3 fr\">\n                            Deck Set:\n                            <select value={this.props.deckSet} onChange={this.handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                            </select>\n                        </div>\n                    </h2>\n                :\n                this.props.width > 600 ? //desktop version\n                    <h2>\n                        <div className=\"container\">\n                            <div className={this.props.optionsMenu === null ? null : this.props.optionsMenu ? \"slideOut\" : \"slideIn\"}>\n                                <span className=\"matches fl\">\n                                    {matchesFound === totalMatches ? <button className=\"shadow-5 grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                                </span>\n                                <span className=\"options-button fl\">\n                                    <span className=\"fr grow\" onClick={this.toggleOptionsMenu} style={{cursor:'pointer'}}>\n                                        Options\n                                        <button className={this.props.optionsMenu ? \"hamburger hamburger--arrowturn-r is-active\" : \"hamburger hamburger--arrowturn-r\"} type=\"button\">\n                                            <span className=\"hamburger-box\">\n                                                <span className=\"hamburger-inner\"></span>\n                                            </span>\n                                        </button> \n                                    </span>\n                                </span>\n                                <span className=\"options-menu fl\" >\n                                    <div className=\"w-40 dib\">\n                                    Deck Set:\n                                        <select value={this.props.deckSet} onChange={this.handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                                            <option value=\"1\">1</option>\n                                            <option value=\"2\">2</option>\n                                            <option value=\"3\">3</option>\n                                            <option value=\"4\">4</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"w-40 dib\">\n                                        # Of Cards:\n                                        <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.props.numOfCardsInput} />\n                                    </div>\n                                    <div className=\"w-20 dib\">\n                                        <button className=\"shadow-5 grow\" onClick={this.handleSubmit}>DONE</button>\n                                    </div>\n                                </span> \n                            </div>\n                        </div>\n                    </h2>\n                    : //mobile version\n                    <div>\n                        <h2>\n                            <span className=\"tc dib pl4\">\n                                {matchesFound === totalMatches ? <button className=\"shadow-5 grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                            </span>\n                            <span className=\"fr dib pr2\">\n                                <button onClick={this.toggleOptionsMenu} className={this.props.optionsMenu ? \"hamburger hamburger--collapse is-active\" : \"hamburger hamburger--collapse\"} type=\"button\">\n                                    <span className=\"hamburger-box\">\n                                        <span className=\"hamburger-inner\"></span>\n                                    </span>\n                                </button> \n                            </span>\n                        </h2>\n                        <div className={this.props.optionsMenu === null ? \"mobile-options-menu\" : this.props.optionsMenu ? \"mobile-options-menu slideDown\" : \"mobile-options-menu slideUp\"} >\n                            <div className=\"w-34 dib tl pl1\">\n                                Deck Set:\n                                <select className=\"shadow-5\" value={this.props.deckSet} onChange={this.handleSelect} name=\"deck\" id=\"deck-select\">\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                </select>\n                            </div>\n                            <div className=\"w-40 dib tl pr1\">\n                                # Of Cards:\n                                <input inputMode=\"numeric\" pattern=\"[0-9]*\" step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5\" type=\"number\" value={this.props.numOfCardsInput} />\n                            </div>\n                            <div className=\"dib tr p1\">\n                                <button className=\"shadow-5 grow\" onClick={this.handleSubmit}>DONE</button>\n                            </div>\n                        </div>\n                    </div>\n                    }\n                {matchesFound === totalMatches ? <div className=\"pyro\"><div className=\"before\"></div><div className=\"after\"></div></div> : null }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isMatched: state.handleMatchesReducer.isMatched,\n        deckSet: state.deckSetReducer.deckSet,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        optionsMenu: state.optionsReducer.optionsMenu,\n        numOfCardsInput: state.numOfCardsReducer.numOfCards,\n        width: state.windowWidthReducer.width\n    }\n}\nexport default connect(mapStateToProps, { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } )(Labels);\n\n","import React from 'react';\nimport './Modal.css';\nimport { connect } from 'react-redux';\nimport { closeModal, optionsOff } from '../actions';\n\nconst Modal = props => {\n    const handleCloseModal = () => {\n        props.closeModal();\n    }\n    const handleSubmit = () => {\n        props.startNewGame(props.numOfCards);\n        props.optionsOff();\n        props.closeModal();\n    }\n    const renderModalAlert = () => {\n        return (\n        <div className=\"modal-container\">\n            <div className=\"modal shadow-5\">\n                <div className=\"modal-title\">\n                    Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n                </div>\n                <div className=\"modal-body\">\n                    <p>{props.body}</p>\n                    <button onClick={handleCloseModal} className=\"grow shadow-5 fr ma3\">Got it</button>\n                </div>\n            </div>\n        </div>\n        );\n    }\n    const renderModalPrompt = () => {\n        return (\n        <div className=\"modal-container\">\n            <div className=\"modal shadow-5\">\n                <div className=\"modal-title\">\n                    Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n                </div>\n                <div className=\"modal-body\">\n                    <p>{props.body}</p>\n                    <button onClick={handleSubmit} className=\"grow shadow-5 fr ma3\">Confirm</button>\n                    <button onClick={handleCloseModal} className=\"grow shadow-5 fl ma3\">Cancel</button>\n                </div>\n            </div>\n        </div>\n        );\n    }\n        return (\n           <div>{ props.type === 'alert' ? renderModalAlert() : renderModalPrompt() }</div>\n          );\n    \n}\nconst mapStateToProps = state => {\n    return {\n        numOfCards: state.numOfCardsReducer.numOfCards\n    }\n}\nexport default connect(mapStateToProps, { closeModal, optionsOff })(Modal);","import React from 'react';\nimport CardList from './CardList';\nimport Labels from './Labels';\nimport {connect} from 'react-redux';\nimport { requestRobots, createInitialIsMatchedState, createInitialIsFlippedState, setDeckSet, getWindowWidth } from '../actions';\nimport './CardList.css';\nimport Modal from './Modal';\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.getWindowWidth();\n        window.addEventListener('resize', this.props.getWindowWidth);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.props.getWindowWidth);\n      }\n\n    startNewGame = (numOfCards) => {\n        this.props.requestRobots(numOfCards);\n        this.props.createInitialIsFlippedState(numOfCards);\n        this.props.createInitialIsMatchedState(numOfCards);\n    }\n    render() {\n        return (\n            <div className=\"tc\">\n                <h1 className=\"tc\">ROBOFRIENDS</h1>\n                { this.props.modal ? \n                    <Modal \n                    type={this.props.modal} \n                    body={this.props.message} \n                    startNewGame={this.startNewGame} /> \n                : null }\n                <Labels startNewGame={this.startNewGame} />\n                <CardList startNewGame={this.startNewGame} />\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        modal: state.modalReducer.modal,\n        message: state.modalReducer.message\n    };\n}\nexport default connect(mapStateToProps, { requestRobots, createInitialIsFlippedState, createInitialIsMatchedState, setDeckSet, getWindowWidth })(App);","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET,\n    MODAL_ALERT,\n    MODAL_PROMPT,\n    CLOSE_MODAL,\n    OPTIONS_ON,\n    OPTIONS_OFF,\n    TOGGLE_OPTIONS,\n    NUM_OF_CARDS,\n    WINDOW_WIDTH\n} from '../constants';\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}\nexport const handleIsFlipReducer = (state={isFlipped:[]}, action) => {\n    let isFlipped = [];\n    switch (action.type) {\n        case CREATE_INITIAL_IS_FLIPPED_STATE:\n            return {...state, isFlipped: action.payload};\n        case HANDLE_FLIP:\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload) {\n                    return !card;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        default: \n            return state;\n    }\n}\nexport const handleMatchesReducer = (state={isMatched:[]}, action) => {\n    switch (action.type) {\n        case CREATE_INITIAL_IS_MATCHED_STATE:\n            return {...state, isMatched: action.payload};\n        case MATCH_FOUND:\n            const isMatched = state.isMatched.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return true;\n                }\n                return card;\n            });\n            return {...state, isMatched};\n        default:\n            return state;\n    }\n}\nconst initialActiveCardsState = {\n    previousCard: {\n        index: null,\n        id: null,\n        pending: false\n    }\n}\nexport const handleActiveCardsReducer = (state=initialActiveCardsState, action) => {\n    switch (action.type) {\n        case STORE_PREVIOUS_CARD: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            index: action.payload.cardIndex, \n                            id: action.payload.id\n                        }\n                    };\n        case PREVIOUS_CARD_PENDING: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            pending: true, \n                        }\n                    };\n        case RESET_ACTIVE_CARDS:\n                return {...state, \n                        previousCard: {\n                            ...state.previousCard, \n                                index: null, \n                                id: null,\n                                pending: false\n                            }\n                        };\n        default:\n            return state;\n    }\n}\nexport const deckSetReducer = (state={deckSet: 1}, action) => {\n    switch (action.type) {\n        case SET_DECK_SET: \n            return {...state, deckSet: action.payload};\n        default:\n            return state;\n    }\n}\nexport const modalReducer = (state={modal: null}, action) => {\n    switch (action.type) {\n        case MODAL_ALERT:\n            document.body.classList.add('overflow-hidden');\n            return {...state, modal: 'alert', message: action.payload};\n        case MODAL_PROMPT:\n                document.body.classList.add('overflow-hidden');\n            return {...state, modal: 'prompt', message: action.payload};\n        case CLOSE_MODAL:\n                document.body.classList.remove('overflow-hidden');\n            return {...state, modal: null, message: null};\n        default:\n            return state;\n    }\n}\nexport const optionsReducer = (state={optionsMenu:null}, action) => {\n    switch (action.type) {\n        case OPTIONS_ON:\n            return {...state, optionsMenu: true};\n        case OPTIONS_OFF:\n            return {...state, optionsMenu: false};\n        case TOGGLE_OPTIONS:\n            return {...state, optionsMenu: !state.optionsMenu};\n        default:\n            return state;\n    }\n}\nexport const numOfCardsReducer = (state={numOfCards: 20}, action) => {\n    switch (action.type) {\n        case NUM_OF_CARDS:\n            return {...state, numOfCards: action.payload};\n        default:\n            return state;\n    }\n}\nexport const windowWidthReducer = (state={width: 0}, action) => {\n    switch (action.type) {\n        case WINDOW_WIDTH:\n            return {...state, width: action.payload};\n        default:\n            return state;\n    }\n}\n/*\nexport const handleFlipReducer = (state={}, action={}) => {\n    let cards = [];\n    switch (action.type) {\n        case 'CREATE_INIITAL_CARD_STATE':\n            //payload of number of cards\n            \n            cards.push({isFlipped: false, isMatched: false, isActive: false, id: action.payload});\n            \n            return {...state, cards};\n        case 'ASSIGN_ROBOT_ID':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    return {...card, robotId: action.payload.robotId};\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'CARD_CLICKED':\n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    if (!card.isMatched) {\n                        return {...card, isFlipped: !card.isFlipped, isActive: true};\n                    }\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'MATCH_FOUND': \n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isMatched: true};\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isMatched: true};\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards}; \n        case 'RESET_ACTIVE_CARDS':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isActive: false}\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isActive: false}\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards};\n        default: return state;\n    }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './components/App';\nimport {requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer, windowWidthReducer} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer, windowWidthReducer});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} ><App /></Provider>, \n    document.getElementById('root'));\n"],"sourceRoot":""}