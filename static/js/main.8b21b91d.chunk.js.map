{"version":3,"sources":["img/CardBack.png","components/CardFront.js","components/CardBack.js","actions/index.js","constants.js","components/CardList.js","components/Labels.js","components/App.js","reducers/index.js","index.js"],"names":["module","exports","CardFront","props","onClick","src","cardImg","alt","CardBack","height","window","innerWidth","id","deckSet","className","robotName","requestRobots","numOfCards","dispatch","type","fetch","parseInt","then","response","json","data","matchedRobots","value","results","push","array","i","length","j","Math","floor","random","temp","shuffle","payload","catch","error","createInitialIsFlippedState","Array","fill","createInitialIsMatchedState","setDeckSet","CardList","handleClick","index","robotId","isMatched","previousCard","pending","handleFlip","storePreviousCard","handleMatchFound","resetActiveCards","setPending","setTimeout","renderCards","arrOfCards","robots","map","robot","key","isFlipped","email","name","first","this","startNewGame","React","Component","connect","state","handleIsFlipReducer","handleMatchesReducer","handleActiveCardsReducer","deckSetReducer","cardIndex","cardOneIndex","cardTwoIndex","Labels","numOfCardsInput","optionsMenu","handleKeyPress","e","alert","confirm","setState","handleSubmit","console","log","handleChange","target","toggleOptionsMenu","handleSelect","totalMatches","matchesFound","forEach","card","style","cursor","onChange","step","onKeyPress","inputMode","pattern","App","initialStateRobots","isPending","initialActiveCardsState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b21b91d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CardBack.6f465c93.png\";","import React from 'react';\nimport './CardList.css';\nimport cardImg from '../img/CardBack.png';\n\nconst CardFront = (props) => {\n    return (\n        <div \n        onClick={props.onClick} >\n            <img src={cardImg} alt='card' />\n        </div>\n    );\n}\n\nexport default CardFront;\n","import React from 'react';\nimport './CardList.css';\n\nconst CardBack = props => {\n    return (\n        <div onClick={props.onClick}>\n            <img height=\"auto\" \n                src={window.innerWidth > 600 ?\n                `https://robohash.org/${props.id}?size=100x100&set=set${props.deckSet}` :\n                `https://robohash.org/${props.id}?size=60x60&set=set${props.deckSet}`} \n                alt='robot'/>\n            <div className=\"card-text\">\n                {props.robotName}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBack;","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND\n} from '../constants';\n\n\nconst shuffle = (array) => {\n    for(let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n      }\n}\nexport const requestRobots = (numOfCards) => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(`https://randomuser.me/api/?results=${parseInt(numOfCards/2)}&inc=name,email`)\n        .then(response => response.json())\n        .then(data => {\n            // Create copy of each robot\n            let matchedRobots = []; \n            for (const value in data.results) {\n                matchedRobots.push(data.results[value]);\n                matchedRobots.push(data.results[value]);\n            }\n            // Shuffle deck (robots)\n            shuffle(matchedRobots); \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: matchedRobots })})\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\nexport const handleFlip = (cardIndex) => {\n    return {\n        type: HANDLE_FLIP,\n        payload: cardIndex\n    }\n}\nexport const createInitialIsFlippedState = numOfCards => {\n    let isFlipped = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_FLIPPED_STATE,\n        payload: isFlipped\n    }\n}\nexport const createInitialIsMatchedState = numOfCards => {\n    let isMatched = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_MATCHED_STATE,\n        payload: isMatched\n    }\n}\nexport const resetActiveCards = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: RESET_ACTIVE_CARDS,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const storePreviousCard = (cardIndex, id) => {\n    return {\n        type: STORE_PREVIOUS_CARD,\n        payload: {\n            cardIndex,\n            id,\n            pending: false\n        }\n    }\n}\nexport const setPending = value => {\n    return {\n        type: PREVIOUS_CARD_PENDING,\n        payload: value\n    }\n}\nexport const handleMatchFound = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: MATCH_FOUND,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const setDeckSet = deckSet => {\n    return {\n        type: 'SET_DECK_SET',\n        payload: deckSet\n    }\n}","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const HANDLE_FLIP = 'HANDLE_FLIP';\nexport const CREATE_INITIAL_IS_FLIPPED_STATE = 'CREATE_INITIAL_IS_FLIPPED_STATE';\nexport const CREATE_INITIAL_IS_MATCHED_STATE = 'CREATE_INITIAL_IS_MATCHED_STATE';\nexport const RESET_ACTIVE_CARDS = 'RESET_ACTIVE_CARDS';\nexport const STORE_PREVIOUS_CARD = 'STORE_PREVIOUS_CARD';\nexport const PREVIOUS_CARD_PENDING = 'PREVIOUS_CARD_PENDING';\nexport const MATCH_FOUND = 'MATCH_FOUND';\n","import React from 'react';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\nimport { connect } from 'react-redux';\nimport { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending } from '../actions';\nimport './CardList.css';\n\nclass CardList extends React.Component {\n    componentDidMount() {\n        this.props.startNewGame(20);\n    }\n    handleClick = (index, robotId) => {\n        //check if card is already matched or previous card\n        if (!this.props.isMatched[index] && !this.props.previousCard.pending) {\n            if (this.props.previousCard.id === null) {\n                this.props.handleFlip(index);\n                this.props.storePreviousCard(index, robotId);\n            } else { \n                //make sure you can't click same card\n                if (this.props.previousCard.index !== index) {\n                    this.props.handleFlip(index);\n                    //if cards match\n                    if (this.props.previousCard.id === robotId) {\n                        this.props.handleMatchFound(this.props.previousCard.index, index);\n                        this.props.resetActiveCards(this.props.previousCard.index, index);\n                    } else {\n                        //if cards do not match\n                        this.props.setPending(true);\n                        setTimeout( () => {\n                            this.props.handleFlip(this.props.previousCard.index);\n                            this.props.handleFlip(index);\n                            this.props.resetActiveCards(this.props.previousCard.index, index);\n                            }, \n                        2000);\n                    }\n                }\n            }\n        }\n    }\n    renderCards = () => {\n        let arrOfCards = this.props.robots.map((robot,index) => {\n            return (\n                <div className={this.props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index}>\n                    <div className={this.props.isFlipped[index] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n                        <div className=\"card__face card__face--front\">\n                            <CardFront onClick={() => this.handleClick(index, robot.email)} />\n                        </div>\n                        <div className=\"card__face card__face--back\">\n                            <CardBack \n                                robotName={robot.name.first} \n                                id={robot.email}\n                                deckSet={this.props.deckSet}\n                                onClick={() => this.handleClick(index, robot.email)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n        return <div>{arrOfCards}</div>; \n    }\n    render() {\n        return (\n            <div className=\"mw9 center ph3-ns\">\n                <div className=\"cf ph2-ns\">\n                    {this.renderCards()}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        robots: state.requestRobots.robots,\n        isFlipped: state.handleIsFlipReducer.isFlipped,\n        isMatched: state.handleMatchesReducer.isMatched,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        deckSet: state.deckSetReducer.deckSet\n    }\n}\n\nexport default connect(mapStateToProps, { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending })(CardList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setDeckSet } from '../actions';\nimport './Labels.css';\n\nclass Labels extends React.Component {\n    state = {\n        numOfCardsInput: 20,\n        optionsMenu: null\n    }\n    handleKeyPress = e => {\n        if (e.key === 'Enter') { \n            if (this.state.numOfCardsInput < 2 || this.state.numOfCardsInput === '') {\n                alert(\"Every robot needs a friend. Please enter a number of 2 or greater.\")\n            } else {\n                const r = window.confirm(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\"); \n                if (r === true) { \n                    this.props.startNewGame(this.state.numOfCardsInput);\n                    this.setState({ optionsMenu : false });\n                }\n            }\n        }\n    }\n    handleSubmit = () => {\n        if (this.state.numOfCardsInput < 2 || this.state.numOfCardsInput === '') {\n            alert(\"Every robot needs a friend. Please enter a number 2 or greater.\")\n        } else {\n            const r = window.confirm(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\"); \n            if (r === true) { \n                this.props.startNewGame(this.state.numOfCardsInput);\n                this.setState({ optionsMenu : false });\n            }\n        }\n        console.log('state:', this.state.numOfCardsInput);\n    }\n    handleChange = e => {\n        if (e.target.value === '') {\n            this.setState({ numOfCardsInput: '' });\n        } else if (e.target.value >= 0 && e.target.value < 99) {\n            this.setState({ numOfCardsInput: parseInt(e.target.value) });\n        } else {\n            this.setState({ numOfCardsInput: '' });\n        }\n    }\n    toggleOptionsMenu = e => {\n        if (this.state.optionsMenu === null) {\n            this.setState({ optionsMenu: true });\n        } else {\n            this.setState({ optionsMenu: !this.state.optionsMenu });\n        }\n    }\n    handleSelect = e => {\n        this.props.setDeckSet(parseInt(e.target.value));\n    }\n    render() {\n        let totalMatches = 0;\n        let matchesFound = 0;\n        this.props.isMatched.forEach(card => {\n            if (card) {matchesFound++;}\n        });\n        matchesFound /= 2;\n        totalMatches = parseInt(this.props.isMatched.length / 2);\n        return (\n            <div>\n                    {window.innerWidth > 600 ? //desktop version\n                <h2>\n                    <div className=\"container\">\n                        <div className={this.state.optionsMenu === null ? null : this.state.optionsMenu ? \"slideOut\" : \"slideIn\"}>\n                            <span className=\"matches fl\">\n                                {matchesFound === totalMatches ? <button className=\"grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                            </span>\n                            <span className=\"options-button fl\">\n                                <span className=\"fr grow\" onClick={this.toggleOptionsMenu} style={{cursor:'pointer'}}>\n                                    Options\n                                    <button className={this.state.optionsMenu ? \"hamburger hamburger--arrowturn-r is-active\" : \"hamburger hamburger--arrowturn-r\"} type=\"button\">\n                                        <span className=\"hamburger-box\">\n                                            <span className=\"hamburger-inner\"></span>\n                                        </span>\n                                    </button> \n                                </span>\n                            </span>\n                            <span className=\"options-menu fl\" >\n                                <div className=\"w-40 dib\">\n                                Deck Set:\n                                <select value={this.state.deckSet} onChange={this.handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                    <option value=\"4\">4</option>\n                                </select>\n                                </div>\n                                <div className=\"w-40 dib\">\n                                # Of Cards:\n                                <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.state.numOfCardsInput} />\n                                </div>\n                                <div className=\"w-20 dib\">\n                                    <button className=\"grow\" onClick={this.handleSubmit}>DONE</button>\n                                </div>\n                            </span> \n                        </div>\n                        </div>\n                        </h2>\n                    : //mobile version!\n                    <div>\n                        <h2>\n                            <span className=\"tc dib pl4\">\n                                {matchesFound === totalMatches ? <button className=\"grow\" onClick={this.handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                            </span>\n                            <span className=\"fr dib pr2\">\n                                <button onClick={this.toggleOptionsMenu} className={this.state.optionsMenu ? \"hamburger hamburger--collapse is-active\" : \"hamburger hamburger--collapse\"} type=\"button\">\n                                    <span className=\"hamburger-box\">\n                                        <span className=\"hamburger-inner\"></span>\n                                    </span>\n                                </button> \n                            </span>\n                        </h2>\n                            <div className={this.state.optionsMenu === null ? \"mobile-options-menu\" : this.state.optionsMenu ? \"mobile-options-menu slideDown\" : \"mobile-options-menu slideUp\"} >\n                                <div className=\"w-34 dib tl pl1\">\n                                    Deck Set:\n                                    <select className=\"shadow-5\" value={this.state.deckSet} onChange={this.handleSelect} name=\"deck\" id=\"deck-select\">\n                                        <option value=\"1\">1</option>\n                                        <option value=\"2\">2</option>\n                                        <option value=\"3\">3</option>\n                                        <option value=\"4\">4</option>\n                                    </select>\n                                </div>\n                                <div className=\"w-40 dib tl pr1\">\n                                # Of Cards:\n                                <input inputMode=\"numeric\" pattern=\"[0-9]*\" step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5\" type=\"number\" value={this.state.numOfCardsInput} />\n                                </div>\n                                <div className=\"dib tr p1\">\n                                    <button className=\"grow\" onClick={this.handleSubmit}>DONE</button>\n                                </div>\n                            </div>\n                            </div>\n                    }\n                {matchesFound === totalMatches ? \n                    <div className=\"pyro\"><div className=\"before\"></div><div className=\"after\"></div></div> \n                    : null }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isMatched: state.handleMatchesReducer.isMatched,\n        deckSet: state.deckSetReducer.deckSet\n    }\n}\nexport default connect(mapStateToProps, { setDeckSet } )(Labels);\n\n//add game won celebration (all cards rotate?) (big overlay text?)\n\n//add options menu if screen is large enough to fit it (remove options button)\n\n//add new game button on web version\n\n","import React from 'react';\nimport CardList from './CardList';\nimport Labels from './Labels';\nimport {connect} from 'react-redux';\nimport { requestRobots, createInitialIsMatchedState, createInitialIsFlippedState, setDeckSet } from '../actions';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n    startNewGame = (numOfCards) => {\n        this.props.requestRobots(numOfCards);\n        this.props.createInitialIsFlippedState(numOfCards);\n        this.props.createInitialIsMatchedState(numOfCards);\n    }\n    render() {\n        return (\n            <div className=\"tc\">\n                <h1 className=\"tc\">ROBOFRIENDS</h1>\n                <Labels startNewGame={this.startNewGame} />\n                <CardList startNewGame={this.startNewGame} />\n                \n            </div>\n        );\n    }\n}\nexport default connect(null, { requestRobots, createInitialIsFlippedState, createInitialIsMatchedState, setDeckSet })(App);","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND\n} from '../constants';\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}\nexport const handleIsFlipReducer = (state={isFlipped:[]}, action) => {\n    let isFlipped = [];\n    switch (action.type) {\n        case CREATE_INITIAL_IS_FLIPPED_STATE:\n            return {...state, isFlipped: action.payload};\n        case HANDLE_FLIP:\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload) {\n                    return !card;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        default: \n            return state;\n    }\n}\nexport const handleMatchesReducer = (state={isMatched:[]}, action) => {\n    switch (action.type) {\n        case CREATE_INITIAL_IS_MATCHED_STATE:\n            return {...state, isMatched: action.payload};\n        case MATCH_FOUND:\n            const isMatched = state.isMatched.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return true;\n                }\n                return card;\n            });\n            return {...state, isMatched};\n        default:\n            return state;\n    }\n}\nconst initialActiveCardsState = {\n    previousCard: {\n        index: null,\n        id: null,\n        pending: false\n    }\n}\nexport const handleActiveCardsReducer = (state=initialActiveCardsState, action) => {\n    switch (action.type) {\n        case STORE_PREVIOUS_CARD: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            index: action.payload.cardIndex, \n                            id: action.payload.id\n                        }\n                    };\n        case PREVIOUS_CARD_PENDING: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            pending: true, \n                        }\n                    };\n        case RESET_ACTIVE_CARDS:\n                return {...state, \n                        previousCard: {\n                            ...state.previousCard, \n                                index: null, \n                                id: null,\n                                pending: false\n                            }\n                        };\n        default:\n            return state;\n    }\n}\nexport const deckSetReducer = (state={deckSet: 1}, action) => {\n    switch (action.type) {\n        case 'SET_DECK_SET': \n            return {...state, deckSet: action.payload};\n        default:\n            return state;\n    }\n}\n/*\nexport const handleFlipReducer = (state={}, action={}) => {\n    let cards = [];\n    switch (action.type) {\n        case 'CREATE_INIITAL_CARD_STATE':\n            //payload of number of cards\n            \n            cards.push({isFlipped: false, isMatched: false, isActive: false, id: action.payload});\n            \n            return {...state, cards};\n        case 'ASSIGN_ROBOT_ID':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    return {...card, robotId: action.payload.robotId};\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'CARD_CLICKED':\n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    if (!card.isMatched) {\n                        return {...card, isFlipped: !card.isFlipped, isActive: true};\n                    }\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'MATCH_FOUND': \n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isMatched: true};\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isMatched: true};\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards}; \n        case 'RESET_ACTIVE_CARDS':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isActive: false}\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isActive: false}\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards};\n        default: return state;\n    }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './components/App';\nimport {requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}