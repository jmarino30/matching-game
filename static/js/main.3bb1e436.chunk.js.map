{"version":3,"sources":["img/CardBack.png","components/CardFront.js","components/CardBack.js","actions/index.js","constants.js","components/CardList.js","components/Labels.js","components/Modal.js","components/App.js","reducers/index.js","index.js"],"names":["module","exports","CardFront","props","onClick","src","cardImg","alt","CardBack","height","id","deckSet","className","robotName","requestRobots","numOfCards","dispatch","type","fetch","parseInt","then","response","json","data","matchedRobots","value","results","push","array","i","length","j","Math","floor","random","temp","shuffle","payload","catch","error","createInitialIsFlippedState","Array","fill","createInitialIsMatchedState","setDeckSet","closeModal","connect","state","robots","isFlipped","handleIsFlipReducer","isMatched","handleMatchesReducer","previousCard","handleActiveCardsReducer","deckSetReducer","width","windowWidthReducer","handleFlip","cardIndex","resetActiveCards","cardOneIndex","cardTwoIndex","handleMatchFound","storePreviousCard","pending","setPending","useEffect","startNewGame","handleClick","index","robotId","setTimeout","arrOfCards","map","robot","key","email","name","first","renderCards","optionsMenu","optionsReducer","numOfCardsInput","numOfCardsReducer","modalAlert","message","modalPrompt","optionsOn","toggleOptions","setNumOfCards","totalMatches","handleKeyPress","e","handleSubmit","handleChange","target","toggleOptionsMenu","handleSelect","matchesFound","forEach","card","style","lineHeight","step","onKeyPress","onChange","cursor","inputMode","pattern","optionsOff","handleCloseModal","body","modal","modalReducer","getWindowWidth","window","innerWidth","addEventListener","removeEventListener","initialStateRobots","isPending","initialActiveCardsState","logger","createLogger","rootReducer","combineReducers","action","document","classList","add","remove","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3bb1e436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CardBack.6f465c93.png\";","import React from 'react';\nimport './CardList.css';\nimport cardImg from '../img/CardBack.png';\n\nconst CardFront = (props) => {\n  return (\n    <div onClick={props.onClick} >\n      <img src={cardImg} alt='card' />\n    </div>\n  );\n}\n\nexport default CardFront;\n","import React from 'react';\nimport './CardList.css';\n\nconst CardBack = props => {\n  return (\n    <div onClick={props.onClick}>\n      <img height=\"auto\" \n        src={`https://robohash.org/${props.id}?set=set${props.deckSet}`} \n        alt='robot'/>\n      <div className=\"card-text\">\n        {props.robotName}\n      </div>\n    </div>\n  );\n}\n\nexport default CardBack;","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET,\n    MODAL_ALERT,\n    MODAL_PROMPT,\n    CLOSE_MODAL,\n    OPTIONS_ON,\n    OPTIONS_OFF,\n    TOGGLE_OPTIONS,\n    NUM_OF_CARDS,\n    WINDOW_WIDTH\n} from '../constants';\n\nconst shuffle = (array) => {\n    for(let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n}\nexport const requestRobots = (numOfCards) => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(`https://randomuser.me/api/?results=${parseInt(numOfCards/2)}&inc=name,email`)\n        .then(response => response.json())\n        .then(data => {\n            // Create copy of each robot\n            let matchedRobots = []; \n            for (const value in data.results) {\n                matchedRobots.push(data.results[value]);\n                matchedRobots.push(data.results[value]);\n            }\n            // Shuffle deck (robots)\n            shuffle(matchedRobots); \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: matchedRobots })})\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\nexport const handleFlip = (cardIndex) => {\n    return {\n        type: HANDLE_FLIP,\n        payload: cardIndex\n    }\n}\nexport const createInitialIsFlippedState = numOfCards => {\n    let isFlipped = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_FLIPPED_STATE,\n        payload: isFlipped\n    }\n}\nexport const createInitialIsMatchedState = numOfCards => {\n    let isMatched = new Array(numOfCards).fill(false);\n    return {\n        type: CREATE_INITIAL_IS_MATCHED_STATE,\n        payload: isMatched\n    }\n}\nexport const resetActiveCards = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: RESET_ACTIVE_CARDS,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const storePreviousCard = (cardIndex, id) => {\n    return {\n        type: STORE_PREVIOUS_CARD,\n        payload: {\n            cardIndex,\n            id,\n            pending: false\n        }\n    }\n}\nexport const setPending = value => {\n    return {\n        type: PREVIOUS_CARD_PENDING,\n        payload: value\n    }\n}\nexport const handleMatchFound = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: MATCH_FOUND,\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const setDeckSet = deckSet => {\n    return {\n        type: SET_DECK_SET,\n        payload: deckSet\n    }\n}\nexport const modalAlert = message => {\n    return {\n        type: MODAL_ALERT,\n        payload: message\n    }\n}\nexport const modalPrompt = message => {\n    return {\n        type: MODAL_PROMPT,\n        payload: message\n    }\n}\nexport const closeModal = () => {\n    return {\n        type: CLOSE_MODAL\n    }\n}\nexport const optionsOn = () => {\n    return {\n        type: OPTIONS_ON\n    }\n}\nexport const optionsOff = () => {\n    return {\n        type: OPTIONS_OFF\n    }\n}\nexport const toggleOptions = () => {\n    return {\n        type: TOGGLE_OPTIONS\n    }\n}\nexport const setNumOfCards = (numOfCards) => {\n    return {\n        type: NUM_OF_CARDS,\n        payload: numOfCards\n    }\n}\nexport const getWindowWidth = () => {\n    return {\n        type: WINDOW_WIDTH,\n        payload: window.innerWidth\n    }\n}","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const HANDLE_FLIP = 'HANDLE_FLIP';\nexport const CREATE_INITIAL_IS_FLIPPED_STATE = 'CREATE_INITIAL_IS_FLIPPED_STATE';\nexport const CREATE_INITIAL_IS_MATCHED_STATE = 'CREATE_INITIAL_IS_MATCHED_STATE';\nexport const RESET_ACTIVE_CARDS = 'RESET_ACTIVE_CARDS';\nexport const STORE_PREVIOUS_CARD = 'STORE_PREVIOUS_CARD';\nexport const PREVIOUS_CARD_PENDING = 'PREVIOUS_CARD_PENDING';\nexport const MATCH_FOUND = 'MATCH_FOUND';\nexport const SET_DECK_SET = 'SET_DECK_SET';\nexport const MODAL_ALERT = 'MODAL_ALERT';\nexport const MODAL_PROMPT = 'MODAL_PROMPT';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const OPTIONS_ON = 'OPTIONS_ON';\nexport const OPTIONS_OFF = 'OPTIONS_OFF';\nexport const TOGGLE_OPTIONS = 'TOGGLE_OPTIONS';\nexport const NUM_OF_CARDS = 'NUM_OF_CARDS';\nexport const WINDOW_WIDTH = 'WINDOW_WIDTH';","import React, {useEffect} from 'react';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\nimport { connect } from 'react-redux';\nimport { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending } from '../actions';\n\nconst CardList = props => {\n  useEffect( () => {\n    props.startNewGame(20);\n  },[]);\n  const handleClick = (index, robotId) => {\n    //check if card is already matched or previous card\n    if (!props.isMatched[index] && !props.previousCard.pending) {\n      if (props.previousCard.id === null) {\n        props.handleFlip(index);\n        props.storePreviousCard(index, robotId);\n      } else { \n        //make sure you can't click same card\n        if (props.previousCard.index !== index) {\n          props.handleFlip(index);\n          //if cards match\n          if (props.previousCard.id === robotId) {\n              props.handleMatchFound(props.previousCard.index, index);\n              props.resetActiveCards(props.previousCard.index, index);\n          } else {\n            //if cards do not match\n            props.setPending(true);\n            setTimeout( () => {\n              props.handleFlip(props.previousCard.index);\n              props.handleFlip(index);\n              props.resetActiveCards(props.previousCard.index, index);\n            }, 2000);\n          }\n        }\n      }\n    }\n  };\n  const renderCards = () => {\n    let arrOfCards = props.robots.map((robot,index) => {\n      return (\n        <div className={props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index}>\n          <div className={props.isFlipped[index] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n            <div className=\"card__face card__face--front\">\n              <CardFront onClick={() => handleClick(index, robot.email)} />\n            </div>\n            <div className=\"card__face card__face--back\">\n              <CardBack \n                robotName={robot.name.first} \n                id={robot.email}\n                deckSet={props.deckSet}\n                width={props.width}\n                onClick={() => handleClick(index, robot.email)}\n              />\n            </div>\n          </div>\n       </div>\n      );\n    });\n    return <div>{arrOfCards}</div>; \n  };\n  return (\n    <div className=\"mw9 center ph3-ns\">\n      <div className=\"cf ph2-ns\">\n        {renderCards()}\n      </div>\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n    return {\n        robots: state.requestRobots.robots,\n        isFlipped: state.handleIsFlipReducer.isFlipped,\n        isMatched: state.handleMatchesReducer.isMatched,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        deckSet: state.deckSetReducer.deckSet,\n        width: state.windowWidthReducer.width\n    }\n}\n\nexport default connect(mapStateToProps, { requestRobots, handleFlip, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending })(CardList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } from '../actions';\nimport './Hamburgers.css';\nimport './Fireworks.css';\n\nconst Labels = props => {\n  const handleKeyPress = e => {\n    if (props.previousCard.pending && props.previousCard.id !== null) {\n      props.modalAlert(\"Please finish current selection before starting a new game!\");\n    } else if (e.key === 'Enter') { \n      handleSubmit();\n    }\n  }\n  const handleSubmit = () => {\n    if (props.previousCard.pending  || props.previousCard.id !== null) {\n      props.modalAlert('Please finish current selection before starting a new game!');\n    } else if (props.numOfCardsInput < 2 || props.numOfCardsInput === '') {\n      props.modalAlert(\"Every robot needs a friend. Please enter a number 2 or greater.\");\n    } else {\n      props.modalPrompt(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\");\n    }\n  }\n  const handleChange = e => {\n    if (e.target.value === '') {\n      props.setNumOfCards('');\n    } else if (e.target.value >= 0 && e.target.value < 99) {\n      props.setNumOfCards(parseInt(e.target.value));\n    } else {\n      props.setNumOfCards('');\n    }\n  }\n  const toggleOptionsMenu = e => {\n    if (props.optionsMenu === null) {\n      props.optionsOn();\n    } else {\n      props.toggleOptions();\n    }\n  }\n  const handleSelect = e => {\n    props.setDeckSet(parseInt(e.target.value));\n  }\n\n  //calculate matches to display in label\n  let totalMatches = 0;\n  let matchesFound = 0;\n  props.isMatched.forEach(card => {\n      if (card) {matchesFound++;}\n  });\n  matchesFound /= 2;\n  totalMatches = parseInt(props.isMatched.length / 2);\n\n  const renderMediumMenu = () => {\n    return (\n      <h2 style={{lineHeight:\"50px\"}}>\n        <div className=\"dib ph4 fl\">\n          {matchesFound === totalMatches ? <button className=\"shadow-5 grow ph2 mh3\" onClick={handleSubmit}>Start New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n        </div>\n        <div className=\"dib ph4 fr\">\n          <button className=\"shadow-5 grow\" onClick={handleSubmit}>RESET</button>\n        </div>\n        <div className=\"dib ph3 fr\">\n          # Of Cards:\n          <input step=\"2\" onKeyPress={handleKeyPress} onChange={handleChange} className=\"shadow-5 grow\" type=\"number\" value={props.numOfCardsInput} />\n        </div>\n        <div className=\"dib ph3 fr\">\n          Deck Set:\n          <select value={props.deckSet} onChange={handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n          </select>\n        </div>\n      </h2>\n    );\n  };\n  const renderLargeMenu = () => {\n    return (\n      <h2>\n        <div className=\"container\">\n          <div className={props.optionsMenu === null ? null : props.optionsMenu ? \"slideOut\" : \"slideIn\"}>\n            <span className=\"matches fl\">\n              {matchesFound === totalMatches ? <button className=\"shadow-5 grow\" onClick={handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n            </span>\n            <span className=\"options-button fl\">\n              <span className=\"fr grow\" onClick={toggleOptionsMenu} style={{cursor:'pointer'}}>\n                Options\n                <button className={props.optionsMenu ? \"hamburger hamburger--arrowturn-r is-active\" : \"hamburger hamburger--arrowturn-r\"} type=\"button\">\n                  <span className=\"hamburger-box\">\n                    <span className=\"hamburger-inner\"></span>\n                  </span>\n                </button> \n              </span>\n            </span>\n            <span className=\"options-menu fl\" >\n              <div className=\"w-40 dib\">\n                Deck Set:\n                <select value={props.deckSet} onChange={handleSelect} className=\"grow pointer shadow-5\" name=\"deck\" id=\"deck-select\">\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                </select>\n              </div>\n              <div className=\"w-40 dib\">\n                  # Of Cards:\n                  <input step=\"2\" onKeyPress={handleKeyPress} onChange={handleChange} className=\"shadow-5 grow\" type=\"number\" value={props.numOfCardsInput} />\n              </div>\n              <div className=\"w-20 dib\">\n                  <button className=\"shadow-5 grow\" onClick={handleSubmit}>DONE</button>\n              </div>\n            </span> \n          </div>\n        </div>\n      </h2>\n    );\n  };\n  const renderSmallMenu = () => {\n    return (\n      <div>\n        <h2>\n          <span className=\"tc dib pl4\">\n            {matchesFound === totalMatches ? <button className=\"shadow-5 grow\" onClick={handleSubmit}>New Game</button> : `Matches Found: ${matchesFound} / ${totalMatches}`}\n          </span>\n          <span className=\"fr dib pr2\">\n            <button onClick={toggleOptionsMenu} className={props.optionsMenu ? \"hamburger hamburger--collapse is-active\" : \"hamburger hamburger--collapse\"} type=\"button\">\n              <span className=\"hamburger-box\">\n                <span className=\"hamburger-inner\"></span>\n              </span>\n            </button> \n          </span>\n        </h2>\n        <div className={props.optionsMenu === null ? \"mobile-options-menu\" : props.optionsMenu ? \"mobile-options-menu slideDown\" : \"mobile-options-menu slideUp\"} >\n          <div className=\"w-34 dib tl pl1\">\n            Deck Set:\n            <select className=\"shadow-5\" value={props.deckSet} onChange={handleSelect} name=\"deck\" id=\"deck-select\">\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n            </select>\n          </div>\n          <div className=\"w-40 dib tl pr1\">\n            # Of Cards:\n            <input inputMode=\"numeric\" pattern=\"[0-9]*\" step=\"2\" onKeyPress={handleKeyPress} onChange={handleChange} className=\"shadow-5\" type=\"number\" value={props.numOfCardsInput} />\n          </div>\n          <div className=\"dib tr p1\">\n            <button className=\"shadow-5 grow\" onClick={handleSubmit}>DONE</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div>\n      { props.width > 1040 ? renderMediumMenu() \n      : props.width > 600 ? renderLargeMenu() \n      : renderSmallMenu() } \n      {matchesFound === totalMatches ? <div className=\"pyro\"><div className=\"before\"></div><div className=\"after\"></div></div> : null }\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isMatched: state.handleMatchesReducer.isMatched,\n    deckSet: state.deckSetReducer.deckSet,\n    previousCard: state.handleActiveCardsReducer.previousCard,\n    optionsMenu: state.optionsReducer.optionsMenu,\n    numOfCardsInput: state.numOfCardsReducer.numOfCards,\n    width: state.windowWidthReducer.width\n  }\n}\nexport default connect(mapStateToProps, { setDeckSet, modalAlert, modalPrompt, closeModal, optionsOn, toggleOptions, setNumOfCards } )(Labels);\n\n","import React from 'react';\nimport './Modal.css';\nimport { connect } from 'react-redux';\nimport { closeModal, optionsOff } from '../actions';\n\nconst Modal = props => {\n  const handleCloseModal = () => {\n    props.closeModal();\n  }\n  const handleSubmit = () => {\n    props.startNewGame(props.numOfCards);\n    props.optionsOff();\n    props.closeModal();\n  }\n  const renderModalAlert = () => {\n    return (\n    <div className=\"modal-container\">\n      <div className=\"modal shadow-5\">\n        <div className=\"modal-title\">\n          Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n        </div>\n        <div className=\"modal-body\">\n          <p>{props.body}</p>\n          <button onClick={handleCloseModal} className=\"grow shadow-5 fr ma3\">Got it</button>\n        </div>\n      </div>\n    </div>\n    );\n  }\n  const renderModalPrompt = () => {\n    return (\n      <div className=\"modal-container\">\n        <div className=\"modal shadow-5\">\n          <div className=\"modal-title\">\n            Beep Boop <span onClick={handleCloseModal} className=\"exit-button grow shadow-5\">X</span>\n          </div>\n          <div className=\"modal-body\">\n            <p>{props.body}</p>\n            <button onClick={handleSubmit} className=\"grow shadow-5 fr ma3\">Confirm</button>\n            <button onClick={handleCloseModal} className=\"grow shadow-5 fl ma3\">Cancel</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return <div>{ props.type === 'alert' ? renderModalAlert() : renderModalPrompt() }</div>;\n}\nconst mapStateToProps = state => {\n  return {\n    numOfCards: state.numOfCardsReducer.numOfCards\n  }\n}\n\nexport default connect(mapStateToProps, { closeModal, optionsOff })(Modal);","import React, {useEffect} from 'react';\nimport CardList from './CardList';\nimport Labels from './Labels';\nimport {connect} from 'react-redux';\nimport { requestRobots, createInitialIsMatchedState, createInitialIsFlippedState, setDeckSet, getWindowWidth } from '../actions';\nimport './CardList.css';\nimport Modal from './Modal';\n\nconst App = props => {\n  useEffect( () => {\n    props.getWindowWidth();\n    window.addEventListener('resize', props.getWindowWidth);\n    return (window.removeEventListener('resize', props.getWindowWidth));\n  }, []);\n\n  const startNewGame = (numOfCards) => {\n    props.requestRobots(numOfCards);\n    props.createInitialIsFlippedState(numOfCards);\n    props.createInitialIsMatchedState(numOfCards);\n  }\n  return (\n    <div className=\"tc\">\n      <h1>ROBOFRIENDS</h1>\n      { props.modal ? \n          <Modal \n          type={props.modal} \n          body={props.message} \n          startNewGame={startNewGame} /> \n      : null }\n      <Labels startNewGame={startNewGame} />\n      <CardList startNewGame={startNewGame} />\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n    return {\n        modal: state.modalReducer.modal,\n        message: state.modalReducer.message\n    };\n}\nexport default connect(mapStateToProps, { requestRobots, createInitialIsFlippedState, createInitialIsMatchedState, setDeckSet, getWindowWidth })(App);","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    HANDLE_FLIP,\n    CREATE_INITIAL_IS_FLIPPED_STATE,\n    CREATE_INITIAL_IS_MATCHED_STATE,\n    RESET_ACTIVE_CARDS,\n    STORE_PREVIOUS_CARD,\n    PREVIOUS_CARD_PENDING,\n    MATCH_FOUND,\n    SET_DECK_SET,\n    MODAL_ALERT,\n    MODAL_PROMPT,\n    CLOSE_MODAL,\n    OPTIONS_ON,\n    OPTIONS_OFF,\n    TOGGLE_OPTIONS,\n    NUM_OF_CARDS,\n    WINDOW_WIDTH\n} from '../constants';\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}\nexport const handleIsFlipReducer = (state={isFlipped:[]}, action) => {\n    let isFlipped = [];\n    switch (action.type) {\n        case CREATE_INITIAL_IS_FLIPPED_STATE:\n            return {...state, isFlipped: action.payload};\n        case HANDLE_FLIP:\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload) {\n                    return !card;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        default: \n            return state;\n    }\n}\nexport const handleMatchesReducer = (state={isMatched:[]}, action) => {\n    switch (action.type) {\n        case CREATE_INITIAL_IS_MATCHED_STATE:\n            return {...state, isMatched: action.payload};\n        case MATCH_FOUND:\n            const isMatched = state.isMatched.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return true;\n                }\n                return card;\n            });\n            return {...state, isMatched};\n        default:\n            return state;\n    }\n}\nconst initialActiveCardsState = {\n    previousCard: {\n        index: null,\n        id: null,\n        pending: false\n    }\n}\nexport const handleActiveCardsReducer = (state=initialActiveCardsState, action) => {\n    switch (action.type) {\n        case STORE_PREVIOUS_CARD: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            index: action.payload.cardIndex, \n                            id: action.payload.id\n                        }\n                    };\n        case PREVIOUS_CARD_PENDING: \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            pending: true, \n                        }\n                    };\n        case RESET_ACTIVE_CARDS:\n                return {...state, \n                        previousCard: {\n                            ...state.previousCard, \n                                index: null, \n                                id: null,\n                                pending: false\n                            }\n                        };\n        default:\n            return state;\n    }\n}\nexport const deckSetReducer = (state={deckSet: 1}, action) => {\n    switch (action.type) {\n        case SET_DECK_SET: \n            return {...state, deckSet: action.payload};\n        default:\n            return state;\n    }\n}\nexport const modalReducer = (state={modal: null}, action) => {\n    switch (action.type) {\n        case MODAL_ALERT:\n            document.body.classList.add('overflow-hidden');\n            return {...state, modal: 'alert', message: action.payload};\n        case MODAL_PROMPT:\n                document.body.classList.add('overflow-hidden');\n            return {...state, modal: 'prompt', message: action.payload};\n        case CLOSE_MODAL:\n                document.body.classList.remove('overflow-hidden');\n            return {...state, modal: null, message: null};\n        default:\n            return state;\n    }\n}\nexport const optionsReducer = (state={optionsMenu:null}, action) => {\n    switch (action.type) {\n        case OPTIONS_ON:\n            return {...state, optionsMenu: true};\n        case OPTIONS_OFF:\n            return {...state, optionsMenu: false};\n        case TOGGLE_OPTIONS:\n            return {...state, optionsMenu: !state.optionsMenu};\n        default:\n            return state;\n    }\n}\nexport const numOfCardsReducer = (state={numOfCards: 20}, action) => {\n    switch (action.type) {\n        case NUM_OF_CARDS:\n            return {...state, numOfCards: action.payload};\n        default:\n            return state;\n    }\n}\nexport const windowWidthReducer = (state={width: 0}, action) => {\n    switch (action.type) {\n        case WINDOW_WIDTH:\n            return {...state, width: action.payload};\n        default:\n            return state;\n    }\n}\n/*\nexport const handleFlipReducer = (state={}, action={}) => {\n    let cards = [];\n    switch (action.type) {\n        case 'CREATE_INIITAL_CARD_STATE':\n            //payload of number of cards\n            \n            cards.push({isFlipped: false, isMatched: false, isActive: false, id: action.payload});\n            \n            return {...state, cards};\n        case 'ASSIGN_ROBOT_ID':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    return {...card, robotId: action.payload.robotId};\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'CARD_CLICKED':\n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    if (!card.isMatched) {\n                        return {...card, isFlipped: !card.isFlipped, isActive: true};\n                    }\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'MATCH_FOUND': \n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isMatched: true};\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isMatched: true};\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards}; \n        case 'RESET_ACTIVE_CARDS':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isActive: false}\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isActive: false}\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards};\n        default: return state;\n    }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './components/App';\nimport {requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer, windowWidthReducer} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, deckSetReducer, modalReducer, optionsReducer, numOfCardsReducer, windowWidthReducer});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} ><App /></Provider>, \n    document.getElementById('root'));\n"],"sourceRoot":""}