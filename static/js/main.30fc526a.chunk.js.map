{"version":3,"sources":["img/CardBack.png","components/CardFront.js","components/CardBack.js","actions/index.js","constants.js","components/CardList.js","components/Labels.js","components/App.js","reducers/index.js","index.js"],"names":["module","exports","CardFront","props","onClick","src","cardImg","alt","CardBack","height","window","innerWidth","id","className","robotName","requestRobots","numOfCards","dispatch","type","fetch","parseInt","then","response","json","data","matchedRobots","value","results","push","array","i","length","j","Math","floor","random","temp","shuffle","payload","catch","error","setNumberOfCards","createInitialIsFlippedState","Array","fill","createInitialIsMatchedState","CardList","handleClick","index","robotId","isMatched","previousCard","pending","handleFlip","storePreviousCard","handleMatchFound","resetActiveCards","setPending","setTimeout","renderCards","arrOfCards","robots","map","robot","key","isFlipped","email","name","first","this","React","Component","connect","state","handleIsFlipReducer","handleMatchesReducer","handleActiveCardsReducer","handleNumberOfCards","cardIndex","cardOneIndex","cardTwoIndex","Labels","numOfCardsInput","handleKeyPress","e","confirm","startNewGame","handleSubmit","handleChange","target","setState","totalMatches","matchesFound","forEach","card","step","onKeyPress","onChange","App","initialStateRobots","isPending","initialActiveCardsState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30fc526a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CardBack.6f465c93.png\";","import React from 'react';\nimport './CardList.css';\nimport cardImg from '../img/CardBack.png';\n\nconst CardFront = (props) => {\n    return (\n        <div \n        onClick={props.onClick} >\n            <img src={cardImg} alt='card' />\n        </div>\n    );\n}\n\nexport default CardFront;\n","import React from 'react';\nimport './CardList.css';\n\nconst CardBack = (props) => {\n    return (\n        <div onClick={props.onClick}>\n            <img height=\"auto\" \n                src={window.innerWidth > 600 ?\n                `https://robohash.org/${props.id}?size=120x120` :\n                `https://robohash.org/${props.id}?size=60x60`} \n                alt='robot'/>\n            <div className=\"card-text\">\n                {window.innerWidth > 600 ? props.robotName : ''}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBack;","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    CARD_CLICKED\n} from '../constants';\n\n\nconst shuffle = (array) => {\n    for(let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n      }\n}\nexport const requestRobots = (numOfCards) => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n   // fetch('https://jsonplaceholder.typicode.com/users') \n    fetch(`https://randomuser.me/api/?results=${parseInt(numOfCards/2)}&inc=name,email`)\n        .then(response => response.json())\n        .then(data => {\n            // Create copy of each robot\n            let matchedRobots = []; \n            for (const value in data.results) {\n                matchedRobots.push(data.results[value]);\n                matchedRobots.push(data.results[value]);\n            }\n            // Shuffle deck (robots)\n            shuffle(matchedRobots); \n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: matchedRobots })})\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\nexport const setNumberOfCards = numOfCards => {\n    return {\n        type: 'SET_NUMBER_OF_CARDS',\n        payload: numOfCards\n    }\n}\nexport const handleFlip = (cardIndex) => {\n    return {\n        type: 'HANDLE_FLIP',\n        payload: cardIndex\n    }\n}\nexport const createInitialIsFlippedState = numOfCards => {\n    let isFlipped = new Array(numOfCards).fill(false);\n    return {\n        type: 'CREATE_INITIAL_IS_FLIPPED_STATE',\n        payload: isFlipped\n    }\n}\nexport const createInitialIsMatchedState = numOfCards => {\n    let isMatched = new Array(numOfCards).fill(false);\n    return {\n        type: 'CREATE_INITIAL_IS_MATCHED_STATE',\n        payload: isMatched\n    }\n}\nexport const resetActiveCards = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: 'RESET_ACTIVE_CARDS',\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\nexport const storePreviousCard = (cardIndex, id) => {\n    return {\n        type: 'STORE_PREVIOUS_CARD',\n        payload: {\n            cardIndex,\n            id,\n            pending: false\n        }\n    }\n}\nexport const setPending = value => {\n    return {\n        type: 'PREVIOUS_CARD_PENDING',\n        payload: value\n    }\n}\nexport const handleMatchFound = (cardOneIndex, cardTwoIndex) => {\n    return {\n        type: 'MATCH_FOUND',\n        payload: {\n            cardOneIndex,\n            cardTwoIndex\n        }\n    }\n}\n\n//handleFlip\n//return action -> type:CARD_CLICKED_(id)\n//return firstSelection -> FIRST_SELECTION_CLICKED\n//\n\n\n\n/*\n    if firstSelection=false\n        set firstSelection=true\n        set firstRobotID\n    else if secondSelection=false\n        set secondSelection=true\n        set secondRobotId\n    on render?\n      if (firstSelection && secondSelection)\n        if ID's match\n            keep isFlipped true\n            update 'matches' state\n            firstSelection=false\n            secondSelection=false\n        else\n            toggle isFlipped back to false\n            firstSelection=false\n            secondSelection=false\n\n\n\n\n*/","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const CARD_CLICKED = 'CARD_CLICKED';","import React from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport CardFront from './CardFront';\nimport CardBack from './CardBack';\nimport { connect } from 'react-redux';\nimport { requestRobots, handleFlip, setNumberOfCards, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending } from '../actions';\nimport './CardList.css';\n\nclass CardList extends React.Component {\n    componentDidMount() {\n        this.props.setNumberOfCards();\n        this.props.requestRobots(this.props.numOfCards);\n        this.props.createInitialIsFlippedState(this.props.numOfCards);\n        this.props.createInitialIsMatchedState(this.props.numOfCards);\n    }\n    handleClick = (index, robotId) => {\n        //check if card is already matched or previous card\n        if (!this.props.isMatched[index] && !this.props.previousCard.pending) {\n            if (this.props.previousCard.id === null) {\n                this.props.handleFlip(index);\n                this.props.storePreviousCard(index, robotId);\n            } else { \n                //make sure you can't click same card\n                if (this.props.previousCard.index !== index) {\n                    this.props.handleFlip(index);\n                    //if cards match\n                    if (this.props.previousCard.id === robotId) {\n                        this.props.handleMatchFound(this.props.previousCard.index, index);\n                        this.props.resetActiveCards(this.props.previousCard.index, index);\n                    } else {\n                        //if cards do not match\n                        this.props.setPending(true);\n                        setTimeout( () => {\n                            this.props.handleFlip(this.props.previousCard.index);\n                            this.props.handleFlip(index);\n                            this.props.resetActiveCards(this.props.previousCard.index, index);\n                            }, \n                        2000);\n                    }\n                }\n            }\n        }\n    }\n    renderCards = () => {\n        let arrOfCards = this.props.robots.map((robot,index) => {\n            return (\n                <div className={this.props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index}>\n                    <div className={this.props.isFlipped[index] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n                        <div className=\"card__face card__face--front\">\n                            <CardFront onClick={() => this.handleClick(index, robot.email)} />\n                        </div>\n                        <div className=\"card__face card__face--back\">\n                            <CardBack \n                                robotName={robot.name.first} \n                                id={robot.email}\n                                onClick={() => this.handleClick(index, robot.email)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n        /*\n        let arrOfMatchedCards = this.props.robots.map((robot,index) => {\n            return (\n                <div className={this.props.isMatched[index] ? \"scene scene--card grow border\" : \"scene scene--card grow\"} key={index+10}>\n                    <div className={this.props.isFlipped[index+10] ? \"card shadow-5 is-flipped\" : \"card shadow-5\"}>\n                        <div className=\"card__face card__face--front\">\n                            <CardFront onClick={() => this.handleClick(index+10, robot.id)} />\n                        </div>\n                        <div className=\"card__face card__face--back\">\n                            <CardBack \n                                robotName={robot.name} \n                                id={robot.id} \n                                onClick={() => this.handleClick(index+10, robot.id)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }); \n        */\n        return <div>{arrOfCards}</div>; \n    }\n    render() {\n        return (\n            <div className=\"mw9 center ph3-ns\">\n                <div className=\"cf ph2-ns\">\n                    {this.renderCards()}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        robots: state.requestRobots.robots,\n        isFlipped: state.handleIsFlipReducer.isFlipped,\n        isMatched: state.handleMatchesReducer.isMatched,\n        previousCard: state.handleActiveCardsReducer.previousCard,\n        numOfCards: state.handleNumberOfCards.numOfCards\n    }\n}\n\nexport default connect(mapStateToProps, { requestRobots, handleFlip, setNumberOfCards, resetActiveCards, createInitialIsFlippedState, createInitialIsMatchedState, handleMatchFound, storePreviousCard, setPending })(CardList);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setNumberOfCards } from '../actions';\n\nclass Labels extends React.Component {\n    state = {\n        numOfCardsInput: 20\n    }\n\n    handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            const r = window.confirm(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\"); \n            if(r == true){ \n                this.props.startNewGame(this.state.numOfCardsInput);\n            }\n        }\n    }\n    handleSubmit = () => {\n        const r = window.confirm(\"This will obliterate all current robots and start a new game. Do you still wish to continue?\"); \n        if(r == true){ \n            this.props.startNewGame(this.state.numOfCardsInput);\n        }\n    }\n    handleChange = e => {\n        if (e.target.value > 1 && e.target.value < 99) {\n            this.setState({ numOfCardsInput: parseInt(e.target.value) })\n        }\n    }\n    render() {\n        let totalMatches = 0;\n        let matchesFound = 0;\n        this.props.isMatched.forEach(card => {\n            if (card) {matchesFound++;}\n        });\n        matchesFound /= 2;\n        totalMatches = parseInt(this.props.isMatched.length / 2);\n        return (\n            <div className=\"tc\">\n                <h2>\n                    <div className=\"labels\">\n                        {matchesFound === totalMatches ? `CONGRATULATIONS!` : `Matches Found: ${matchesFound} / ${totalMatches}`}\n                    </div>\n                    <div className=\"labels\">\n                        Number Of Cards:\n                        <input step=\"2\" onKeyPress={this.handleKeyPress} onChange={this.handleChange} className=\"shadow-5 grow\" type=\"number\" value={this.state.numOfCardsInput} />\n                        {window.innerWidth > 600 ? <button className=\"grow\" onClick={this.handleSubmit}>GO</button> : ''}\n                    </div>\n                </h2>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isMatched: state.handleMatchesReducer.isMatched,\n        numOfCards: state.handleNumberOfCards.numOfCards\n    }\n}\nexport default connect(mapStateToProps, {setNumberOfCards} )(Labels);","import React from 'react';\nimport CardList from './CardList';\nimport Labels from './Labels';\nimport {connect} from 'react-redux';\nimport { setNumberOfCards, requestRobots, createInitialIsMatchedState, createInitialIsFlippedState} from '../actions';\n\n\nclass App extends React.Component {\n\n    startNewGame = (numOfCards) => {\n        this.props.setNumberOfCards(numOfCards);\n        this.props.requestRobots(numOfCards);\n        this.props.createInitialIsFlippedState(numOfCards);\n        this.props.createInitialIsMatchedState(numOfCards);\n    }\n    \n    render() {\n        return (\n            <div>\n                <h1 className=\"tc\">ROBOFRIENDS</h1>\n                <Labels startNewGame={this.startNewGame} />\n                <CardList />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\nexport default connect(mapStateToProps, { setNumberOfCards, requestRobots, createInitialIsFlippedState, createInitialIsMatchedState })(App);","import { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from '../constants';\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}\nexport const handleNumberOfCards = (state={numOfCards: 20}, action) => {\n    switch (action.type) {\n        case 'SET_NUMBER_OF_CARDS':\n            return {...state, numOfCards: action.payload}\n        default:\n            return state;\n    }\n}\nexport const handleIsFlipReducer = (state={isFlipped:[]}, action) => {\n    let isFlipped = [];\n    switch (action.type) {\n        case 'CREATE_INITIAL_IS_FLIPPED_STATE':\n            return {...state, isFlipped: action.payload};\n        case 'HANDLE_FLIP':\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload) {\n                    return !card;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        case 'HANDLE_FLIP_RESET':\n            isFlipped = state.isFlipped.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return false;\n                }\n                return card;\n            });\n            return {...state, isFlipped};\n        default: \n            return state;\n    }\n}\nexport const handleMatchesReducer = (state={isMatched:[]}, action) => {\n    switch (action.type) {\n        case 'CREATE_INITIAL_IS_MATCHED_STATE':\n            return {...state, isMatched: action.payload};\n        case 'MATCH_FOUND':\n            const isMatched = state.isMatched.map((card, index) => {\n                if (index === action.payload.cardOneIndex || index === action.payload.cardTwoIndex) {\n                    return true;\n                }\n                return card;\n            });\n            return {...state, isMatched};\n        default:\n            return state;\n    }\n}\nconst initialActiveCardsState = {\n    previousCard: {\n        index: null,\n        id: null,\n        pending: false\n    }\n}\nexport const handleActiveCardsReducer = (state=initialActiveCardsState, action) => {\n    switch (action.type) {\n        case 'STORE_PREVIOUS_CARD': \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            index: action.payload.cardIndex, \n                            id: action.payload.id\n                        }\n                    };\n        case 'PREVIOUS_CARD_PENDING': \n            return {...state, \n                    previousCard: {\n                        ...state.previousCard, \n                            pending: true, \n                        }\n                    };\n        case 'RESET_ACTIVE_CARDS':\n                return {...state, \n                        previousCard: {\n                            ...state.previousCard, \n                                index: null, \n                                id: null,\n                                pending: false\n                            }\n                        };\n        default:\n            return state;\n    }\n}\n/*\nexport const handleFlipReducer = (state={}, action={}) => {\n    let cards = [];\n    switch (action.type) {\n        case 'CREATE_INIITAL_CARD_STATE':\n            //payload of number of cards\n            \n            cards.push({isFlipped: false, isMatched: false, isActive: false, id: action.payload});\n            \n            return {...state, cards};\n        case 'ASSIGN_ROBOT_ID':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    return {...card, robotId: action.payload.robotId};\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'CARD_CLICKED':\n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardIndex === index) {\n                    if (!card.isMatched) {\n                        return {...card, isFlipped: !card.isFlipped, isActive: true};\n                    }\n                }\n                return card;\n            });\n            return {...state, cards};\n        case 'MATCH_FOUND': \n             cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isMatched: true};\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isMatched: true};\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards}; \n        case 'RESET_ACTIVE_CARDS':\n            cards = state.cards.map((card, index) => {\n                if (action.payload.cardOneIndex === index) {\n                    return {...card, isActive: false}\n                } else if (action.payload.cardTwoIndex === index) {\n                    return {...card, isActive: false}\n                } else {\n                    return card;\n                }\n            });\n            return {...state, cards};\n        default: return state;\n    }\n}\n*/\n\n/*\nSTATE PROBZ!!!!!!!!\n\nisFlipped = [false, false, ...]\nisMatched = [false, false, ...]\nactiveCardOne = (index, robot.id)\nactiveCardTwo = (index, robot.id)\n\n\n\n\n\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './components/App';\nimport {requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, handleNumberOfCards} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, handleIsFlipReducer, handleActiveCardsReducer, handleMatchesReducer, handleNumberOfCards});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>\n    , \n    document.getElementById('root'));\n"],"sourceRoot":""}